"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./services/commonService.js":
/*!***********************************!*\
  !*** ./services/commonService.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var currency_formatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! currency-formatter */ \"./node_modules/currency-formatter/index.js\");\n/* harmony import */ var currency_formatter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(currency_formatter__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var js_sha1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-sha1 */ \"./node_modules/js-sha1/src/sha1.js\");\n/* harmony import */ var js_sha1__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(js_sha1__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var js_base64__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! js-base64 */ \"./node_modules/js-base64/base64.mjs\");\n/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! i18next */ \"./node_modules/i18next/dist/esm/i18next.js\");\n\n\n\n\n\nvar CryptoJS = __webpack_require__(/*! crypto-js */ \"./node_modules/crypto-js/index.js\");\nvar global = {};\nif (true) {\n    global = window;\n}\nconst seatIdentifiers = {\n    \".GY\": \"Gangway\",\n    \".DR_IMG\": \"Driver Image\",\n    \".ST_IMG\": \"Strairs Image\",\n    \".WR_IMG\": \"Wash Room Image\",\n    \".BR\": \"Break\",\n    GY: \"Gangway\",\n    DR_IMG: \"Driver Image\",\n    ST_IMG: \"Strairs Image\",\n    WR_IMG: \"Wash Room Image\",\n    BR: \"Break\",\n    SS: \"Semi Sleeper\",\n    LB: \"Lower Berth\",\n    UB: \"Upper Berth\",\n    BS: \"CLASICO\",\n    PB: \"CLASICO\",\n    NPB: \"CLASICO\",\n    SLB: \"CLASICO\",\n    SUB: \"CLASICO\",\n    SST: \"CLASICO\",\n    NA: \"CLASICO\",\n    ST: \"CLASICO\",\n    DLB: \"CLASICO\",\n    DUB: \"CLASICO\",\n    WSS: \"CLASICO\",\n    WST: \"CLASICO\",\n    WLB: \"CLASICO\",\n    WUB: \"CLASICO\",\n    WSL: \"CLASICO\",\n    WSU: \"CLASICOr\",\n    BU: \"CLASICO\",\n    EC: \"Semi Cama\",\n    \"SEMI CAMA\": \"SEMI CAMA\",\n    SEMI_CAMA: \"SEMI CAMA\",\n    \"SALON CAMA\": \"SALON CAMA\",\n    SALONCAMA: \"SALON CAMA\",\n    SALON_CAMA: \"SALON CAMA\",\n    CLASICO: \"Clasico\",\n    EJECUTIVO: \"Ejecutivo\",\n    PREMIUM: \"Premium\",\n    Premium: \"Premium\",\n    \"CAMA PREMIUM\": \"CAMA PREMIUM\",\n    \"Cama Premium\": \"CAMA PREMIUM\",\n    \"cama premium\": \"CAMA PREMIUM\",\n    PREFERENTE: \"PREMIUM\",\n    Preferente: \"PREFERENTE\",\n    preferente: \"PREFERENTE\",\n    \"CAMA SUITE\": \"CAMA SUITE\",\n    \"Cama Suite\": \"CAMA SUITE\",\n    \"cama suite\": \"CAMA SUITE\",\n    \"PREMIUM PROMO\": \"PREMIUM PROMO\",\n    \"Premium Promo\": \"PREMIUM PROMO\",\n    \"premium promo\": \"PREMIUM PROMO\",\n    \"CAMA VIP\": \"CAMA VIP\",\n    \"Cama Vip\": \"CAMA VIP\",\n    \"cama vip\": \"CAMA VIP\",\n    \"SUITE CAMA\": \"SUITE CAMA\",\n    \"Suite Cama\": \"SUITE CAMA\",\n    \"suite cama\": \"SUITE CAMA\",\n    SC: \"Semi Cama\",\n    CO: \"CLASICO\",\n    EX: \"SALON CAMA\",\n    SP: \"CLASICO\",\n    SALON: \"SALON CAMA\",\n    \"SALON MIXTO\": \"SALON CAMA\",\n    SEMICAMA: \"SEMI CAMA\",\n    \"Semi Cama\": \"SEMI CAMA\",\n    CAMA: \"SALON CAMA\",\n    COMUN: \"CLASICO\",\n    \"COMUN CON AIRE\": \"CLASICO\",\n    \"Comun con Aire\": \"CLASICO\",\n    SCA: \"CLASICO\",\n    Salon: \"SALON CAMA\",\n    \"Salon Sin Vent\": \"SALON SIN VENT\",\n    \"Bio Bio Superior\": \"BIO BIO SUPERIOR\"\n};\nconst getSeatType = (type, seatIds)=>{\n    let types = seatIds;\n    return types[type];\n};\nconst getAmenityName = (rawAnemity)=>{\n    switch(rawAnemity){\n        case \"mobile ticket\":\n            return \"RESULTS_PAGE.MOBILE_TICKET\";\n            break;\n        case \"charging plug\":\n            return \"RESULTS_PAGE.CHARGING_PLUG\";\n            break;\n        case \"wifi\":\n            return \"RESULTS_PAGE.WIFI\";\n            break;\n        case \"movie\":\n            return \"RESULTS_PAGE.ENTERTAINMENT\";\n            break;\n        case \"baggage\":\n            return \"RESULTS_PAGE.BAGGAGE\";\n            break;\n        case \"restrooms\":\n            return \"RESULTS_PAGE.RESTROOMS\";\n            break;\n        case \"air condtion\":\n            return \"RESULTS_PAGE.AIR_CONDITIONER\";\n            break;\n        case \"snacks new\":\n            return \"RESULTS_PAGE.SNACKS\";\n            break;\n        case \"coffee\":\n            return \"RESULTS_PAGE.COFFEE\";\n            break;\n        case \"gaming\":\n            return \"RESULTS_PAGE.GAMING\";\n            break;\n        default:\n            return rawAnemity;\n            break;\n    }\n};\nlet token;\nif (true) {\n    let localData = localStorage.getItem(\"loginData\");\n    if (localData) {\n        localData = JSON.stringify(js_base64__WEBPACK_IMPORTED_MODULE_4__.Base64.decode(localData));\n    }\n    token = localData === null || localData === void 0 ? void 0 : localData.token;\n}\nconst CommonService = {\n    toast: {},\n    formatData: (jsonArr)=>{\n        if (jsonArr) {\n            let keys = jsonArr[0];\n            let currArr = [];\n            for(let i = 1; i < jsonArr.length; i++){\n                let currentObj = {};\n                for(let j = 0; j < keys.length; j++){\n                    currentObj[keys[j]] = jsonArr[i][j];\n                }\n                currArr.push(currentObj);\n            }\n            return currArr;\n        }\n    },\n    updateCartItem: (product, increase, cartList, setCartList)=>{\n        let newItemsArr = [\n            ...cartList\n        ];\n        let qty = increase ? (product === null || product === void 0 ? void 0 : product.quantity) + 1 : (product === null || product === void 0 ? void 0 : product.quantity) <= 1 ? (product === null || product === void 0 ? void 0 : product.quantity) - 0 : (product === null || product === void 0 ? void 0 : product.quantity) - 1;\n        let tempProduct = {\n            ...product,\n            [\"quantity\"]: qty\n        };\n        let productIndex = null;\n        newItemsArr.map((item, i)=>{\n            if (item.id === (product === null || product === void 0 ? void 0 : product.id)) {\n                productIndex = i;\n            }\n        });\n        newItemsArr.splice(productIndex, 1, tempProduct);\n        setCartList(newItemsArr);\n    },\n    getSeatName: (rawSeat)=>{\n        switch(rawSeat){\n            case \"SALON CAMA\":\n                return \"Sal\\xf3n Cama\";\n                break;\n            case \"CLASICO\":\n                return \"Cl\\xe1sico\";\n                break;\n            case \"Clasico\":\n                return \"Cl\\xe1sico\";\n                break;\n            case \"clasico\":\n                return \"Cl\\xe1sico\";\n                break;\n            case \"Salon Sin Vent\":\n                return \"Sal\\xf3n Sin Vent\";\n                break;\n            case \"Salon Preferente\":\n                return \"Sal\\xf3n Preferente\";\n                break;\n            case \"SALON SIN VENT\":\n                return \"Sal\\xf3n Sin Vent\";\n                break;\n            case \"SALON PREFERENTE\":\n                return \"Sal\\xf3n Preferente\";\n                break;\n            case \"SALON\":\n                return \"Sal\\xf3n \";\n                break;\n            case \"Salon\":\n                return \"Sal\\xf3n \";\n                break;\n            default:\n                return CommonService.capitalize(rawSeat);\n                break;\n        }\n    },\n    capitalize: (str)=>{\n        if (str) {\n            let strArr = str.split(\" \");\n            for(let i = 0; i < strArr.length; i++){\n                strArr[i] = strArr[i][0] && strArr[i][0].toUpperCase() + strArr[i].substr(1).toLowerCase();\n            }\n            return strArr.join(\" \");\n        }\n        return \"\";\n    },\n    round: (number, digit)=>{\n        let p = Math.pow(10, digit);\n        return Math.round(number * p) / p;\n    },\n    getTimezoneOffsetInHoursAndMinutes: ()=>{\n        let offset = new Date().getTimezoneOffset();\n        let hours = Math.abs((0,lodash__WEBPACK_IMPORTED_MODULE_2__.toInteger)(offset / 60));\n        let minutes = CommonService.preZero(Math.abs(offset % 60));\n        return CommonService.preZero(hours) + \":\" + minutes;\n    },\n    splitRutAndDv: (rut)=>{\n        let cValue = rut.replace(/[\\.\\-]/g, \"\");\n        if (cValue.length == 0) return [\n            null,\n            null\n        ];\n        if (cValue.length == 1) return [\n            cValue,\n            null\n        ];\n        let cDv = cValue.charAt(cValue.length - 1);\n        let cRut = cValue.substring(0, cValue.length - 1);\n        return [\n            cRut,\n            cDv\n        ];\n    },\n    formatRut: (value)=>{\n        value = value.toString();\n        value = value.replace(/[.-]/g, \"\");\n        if ((value + \"\").length > 9) {\n            value = value + \"\";\n        }\n        let rutAndDv = CommonService.splitRutAndDv(value);\n        let cRut = rutAndDv[0];\n        let cDv = rutAndDv[1];\n        if (!(cRut && cDv)) return cRut || value;\n        let rutF = \"\";\n        while(cRut.length > 3){\n            rutF = \".\" + cRut.substr(cRut.length - 3) + rutF;\n            cRut = cRut.substring(0, cRut.length - 3);\n        }\n        return cRut + rutF + \"-\" + cDv;\n    },\n    isRutValid: (rut)=>{\n        if (typeof rut !== \"string\") return false;\n        let cRut = rut.replace(/[\\.\\-]/g, \"\");\n        if (cRut.length < 2) return false;\n        let cDv = cRut.charAt(cRut.length - 1).toUpperCase();\n        let nRut = parseInt(cRut.substr(0, cRut.length - 1));\n        if (nRut === NaN) return false;\n        return CommonService.computeDv(nRut).toString().toUpperCase() === cDv;\n    },\n    isRut: (type, idCardTypes)=>{\n        if (idCardTypes) {\n            let cardType = idCardTypes.filter((t)=>{\n                return t.id == type;\n            });\n            if (cardType && cardType[0] && cardType[0].name && cardType[0].name.toLowerCase().indexOf(\"rut\") > -1) {\n                return true;\n            }\n        }\n        return false;\n    },\n    computeDv: (rut)=>{\n        let suma = 0;\n        let mul = 2;\n        if (typeof rut !== \"number\") return;\n        rut = rut.toString();\n        for(let i = rut.length - 1; i >= 0; i--){\n            suma = suma + rut.charAt(i) * mul;\n            mul = (mul + 1) % 8 || 2;\n        }\n        switch(suma % 11){\n            case 1:\n                return \"k\";\n            case 0:\n                return 0;\n            default:\n                return 11 - suma % 11;\n        }\n    },\n    copyObject: (ob)=>{\n        if (!ob) return {};\n        return JSON.parse(JSON.stringify(ob));\n    },\n    isEMailValid: (email)=>{\n        if (email) {\n            if (email.match(/^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,6})+$/)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    },\n    isMobileValid: (mobile)=>{\n        if (mobile) {\n            if (mobile.match(/^[0-9]{9}$/)) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    },\n    storeLoginDetails: function(loginData, setLoginData) {\n        let fromHome = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n        global.token = loginData ? loginData.auth_token : null;\n        if (loginData) {\n            if (loginData.carpool_customer) {\n                global.xAccess = loginData.carpool_customer.access_token;\n            }\n            if (loginData.carpool_driver) {\n                global.driverXAccess = loginData.carpool_driver.access_token;\n            }\n        } else {\n            global.xAccess = null;\n            global.driverXAccess = null;\n        }\n        setLoginData(loginData);\n        if (!fromHome) loginData ? CommonService.setLocal(\"loginData\", loginData) : CommonService.setLocal(\"loginData\", {});\n    },\n    isLoggedIn: ()=>{\n        if (!global.token) {\n            return false;\n        }\n        return true;\n    },\n    logout: ()=>{\n        global.token = null;\n        CommonService.removeLocal(\"googleAccessToken\");\n        CommonService.removeLocal(\"loginData\");\n        localStorage.removeItem(\"selectedLanguage\");\n        window.location.reload();\n    },\n    getStatusName: (status)=>{\n        let s = {\n            confirmed: \"ConfirmadoII\",\n            booked: \"Reservados\",\n            cancelled: \"Anulado\",\n            pending: \"Pending\",\n            partial_cancelled: \"Canceledo Parcialmente\"\n        };\n        return s[status];\n    },\n    phoneNumberFormat: function(text) {\n        let len = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n        if (text) {\n            text = (text + \"\").replace(/[a-zA-Z]/g, \"\");\n            if ((text + \"\").length > len) {\n                text = (text + \"\").substr(0, len);\n            }\n        }\n        return text;\n    },\n    onlyNumbers: (text)=>{\n        if (text) {\n            text = (text + \"\").replace(/[^0-9]/g, \"\");\n        }\n        return text;\n    },\n    onlyChars: (text)=>{\n        if (text) {\n            text = (text + \"\").replace(/[^a-zA-Z]/i, \"\");\n        }\n        return text;\n    },\n    onlyNumericValues: (text)=>{\n        if (text.match(/[^0-9]/g)) {\n            return false;\n        } else return true;\n    },\n    removeCommas: (text)=>{\n        let newText;\n        text.map((val)=>val != \"\" ? newText = val : null);\n        return newText;\n    },\n    isEqual: (value, other)=>{\n        // Get the value type\n        var type = Object.prototype.toString.call(value);\n        // If the two objects are not the same type, return false\n        if (type !== Object.prototype.toString.call(other)) return false;\n        // If items are not an object or array, return false\n        if ([\n            \"[object Array]\",\n            \"[object Object]\"\n        ].indexOf(type) < 0) return false;\n        // Compare the length of the length of the two items\n        var valueLen = type === \"[object Array]\" ? value.length : Object.keys(value).length;\n        var otherLen = type === \"[object Array]\" ? other.length : Object.keys(other).length;\n        if (valueLen !== otherLen) return false;\n        // Compare two items\n        var compare = function(item1, item2) {\n            // Get the object type\n            var itemType = Object.prototype.toString.call(item1);\n            // If an object or array, compare recursively\n            if ([\n                \"[object Array]\",\n                \"[object Object]\"\n            ].indexOf(itemType) >= 0) {\n                if (!CommonService.isEqual(item1, item2)) return false;\n            } else {\n                // If the two items are not the same type, return false\n                if (itemType !== Object.prototype.toString.call(item2)) return false;\n                // Else if it's a function, convert to a string and compare\n                // Otherwise, just compare\n                if (itemType === \"[object Function]\") {\n                    if (item1.toString() !== item2.toString()) return false;\n                } else {\n                    if (item1 !== item2) return false;\n                }\n            }\n        };\n        // Compare properties\n        if (type === \"[object Array]\") {\n            for(var i = 0; i < valueLen; i++){\n                if (compare(value[i], other[i]) === false) return false;\n            }\n        } else {\n            for(var key in value){\n                if (value.hasOwnProperty(key)) {\n                    if (compare(value[key], other[key]) === false) return false;\n                }\n            }\n        }\n        // If nothing failed, return true\n        return true;\n    },\n    currency: (amount)=>{\n        let formattedAmount = currency_formatter__WEBPACK_IMPORTED_MODULE_0__.format(amount, {\n            code: \"CLP\"\n        });\n        return \"$\" + formattedAmount.replace(\"$\", \"\").trim().split(\",\")[0];\n    },\n    generateXAccess: (key, token)=>{\n        let timeNow = Math.floor(new Date().getTime() / 1000);\n        let t = [\n            timeNow,\n            js_sha1__WEBPACK_IMPORTED_MODULE_1__.hex([\n                key,\n                token,\n                timeNow\n            ].join(\"\"))\n        ].join(\".\");\n        return t;\n    },\n    preZero: (n)=>{\n        if (n > 9) {\n            return n;\n        }\n        return \"0\" + n;\n    },\n    distance: (param)=>{\n        let { lat1 , lon1 , lat2 , lon2 , unit  } = param;\n        if (lat1 == lat2 && lon1 == lon2) {\n            return 0;\n        } else {\n            var radlat1 = Math.PI * lat1 / 180;\n            var radlat2 = Math.PI * lat2 / 180;\n            var theta = lon1 - lon2;\n            var radtheta = Math.PI * theta / 180;\n            var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n            if (dist > 1) {\n                dist = 1;\n            }\n            dist = Math.acos(dist);\n            dist = dist * 180 / Math.PI;\n            dist = dist * 60 * 1.1515;\n            if (unit == \"K\") {\n                dist = dist * 1.609344;\n            }\n            if (unit == \"N\") {\n                dist = dist * 0.8684;\n            }\n            if (unit == \"MT\") {\n                dist = dist * 1.609344 * 1000;\n            }\n            return dist;\n        }\n    },\n    show3AddressWords: (address)=>{\n        let retAdd = [];\n        if (address) {\n            let addArr = address.split(\",\");\n            let i = 0;\n            for (let a of addArr){\n                if (a && i < 3) retAdd.push(a);\n                i++;\n            }\n        }\n        return retAdd.join(\",\");\n    },\n    makeServiceDetailsApi: (serviceDetails)=>{\n        try {\n            let floor = serviceDetails.bus_layout.floor;\n            let floorArr = [];\n            let lowerFloor = [];\n            let upperFloor = [];\n            let seat_details = [];\n            let available = [];\n            let availableFloor = [];\n            let availableArr;\n            let availableArrFloor = [];\n            let availableSeats = 0;\n            availableArrFloor = serviceDetails.bus_layout.available && serviceDetails.bus_layout.available.split(\":\");\n            let j = 0;\n            for (let floor1 of availableArrFloor){\n                let availableArr1 = floor1.split(\",\");\n                availableFloor[j] = [];\n                for(let i = 0; i < availableArr1.length; i++){\n                    let cell = availableArr1[i].split(\"|\");\n                    availableFloor[j].push({\n                        seatNumber: cell[0],\n                        seatFare: cell[1]\n                    });\n                    if (cell && cell[0]) {\n                        availableSeats++;\n                    }\n                }\n                j++;\n            }\n            // }\n            let coach_details = [];\n            let indexOfColon = serviceDetails.bus_layout.coach_details.indexOf(\":\");\n            let coachFloors = serviceDetails.bus_layout.coach_details.split(\":\");\n            let floorNo = 0;\n            for (let floor2 of coachFloors){\n                let rowArr = floor2.split(\",\");\n                for(let i1 = 0; i1 < rowArr.length; i1++){\n                    let colArr = rowArr[i1].split(\"-\");\n                    for(let j1 = 0; j1 < colArr.length; j1++){\n                        let cell1 = colArr[j1].split(\"|\");\n                        coach_details.push({\n                            seatNumber: cell1[0],\n                            seatType: cell1[1] ? cell1[1] : \"\",\n                            rowId: i1,\n                            colId: j1,\n                            floorNo: floorNo\n                        });\n                    }\n                }\n                floorNo++;\n            }\n            let floors = [];\n            if (floor) {\n                if (floor.indexOf(\"@\") >= 0) {\n                    floorArr = floor.split(\"@\");\n                    lowerFloor = floorArr[0] ? floorArr[0].split(\",\") : [];\n                    if (floorArr[1] && floorArr[1].indexOf(\",\") > -1) {\n                        upperFloor = floorArr[1].split(\",\");\n                    }\n                    let i2 = 0;\n                    for (let arr of floorArr){\n                        let seatReverse = arr ? arr.split(\":\") : [];\n                        floors[i2] = {};\n                        if (seatReverse[0] && seatReverse[0].indexOf(\",\") > -1) {\n                            floors[i2].normal = seatReverse[0].split(\",\");\n                        }\n                        if (seatReverse[1] && seatReverse[1].indexOf(\",\") > -1) {\n                            floors[i2].reverse = seatReverse[1].split(\",\");\n                        }\n                        i2++;\n                    }\n                } else {\n                    lowerFloor = floor.split(\",\");\n                }\n            }\n            let seatAvailable;\n            let noAvailableColon = serviceDetails.bus_layout.available.indexOf(\":\") < 0;\n            let availableArrNoCol = serviceDetails.bus_layout.available.split(\",\");\n            for(let i3 = 0; i3 < coach_details.length; i3++){\n                let seatJson = {};\n                let isSeat = false;\n                let seatType = getSeatType(coach_details[i3].seatType, seatIdentifiers);\n                let isGangway = coach_details[i3].seatType.indexOf(\"GY\") >= 0 || !seatType ? true : false;\n                let berthLower;\n                let berthUpper;\n                let berthType;\n                let seatDirection;\n                let floorno = 0;\n                for (let floor3 of floors){\n                    if (floorno === coach_details[i3].floorNo) {\n                        let isSeatInFloorNoraml = null;\n                        let isSeatInFloorRev = null;\n                        seatDirection = null;\n                        isSeatInFloorNoraml = floor3.normal && floor3.normal.find((number)=>{\n                            if (number == coach_details[i3].seatNumber) {\n                                return true;\n                            }\n                        });\n                        if (floor3.reverse) {\n                            isSeatInFloorRev = floor3.reverse.find((number)=>{\n                                if (number == coach_details[i3].seatNumber) {\n                                    return true;\n                                }\n                            });\n                        }\n                        if (isSeatInFloorNoraml) {\n                            berthType = floorno;\n                            seatDirection = 1;\n                            break;\n                        }\n                        if (isSeatInFloorRev) {\n                            berthType = floorno;\n                            seatDirection = 2;\n                            break;\n                        }\n                    }\n                    floorno++;\n                }\n                let seatAvailable1;\n                if (!(CommonService.isTrain() || serviceDetails.travel_id == 272) && noAvailableColon) {\n                    let availableItem = availableArrNoCol.find((seat)=>{\n                        return seat.split(\"|\")[0] == coach_details[i3].seatNumber;\n                    });\n                    if (availableItem) {\n                        seatAvailable1 = {\n                            seatNumber: availableItem.split(\"|\")[0],\n                            seatFare: availableItem.split(\"|\")[1]\n                        };\n                    }\n                } else {\n                    if (availableFloor[coach_details[i3].floorNo]) {\n                        seatAvailable1 = availableFloor[coach_details[i3].floorNo].find((seat)=>{\n                            return seat.seatNumber == coach_details[i3].seatNumber;\n                        });\n                    }\n                }\n                if (indexOfColon < 0) {\n                    berthLower = lowerFloor.find((number)=>{\n                        if (number == coach_details[i3].seatNumber) {\n                            return true;\n                        }\n                    });\n                    if (upperFloor) {\n                        berthUpper = upperFloor.find((number)=>{\n                            if (number == coach_details[i3].seatNumber) {\n                                return true;\n                            }\n                        });\n                    }\n                }\n                let fare = seatAvailable1 ? seatAvailable1.seatFare : null;\n                seatJson[\"available\"] = seatAvailable1 ? true : false;\n                seatJson[\"fare\"] = fare;\n                seatJson[\"is_ladies_seat\"] = false;\n                seatJson[\"is_gents_seat\"] = false;\n                seatJson[\"type\"] = seatType ? seatType : \"SALON CAMA\";\n                seatJson[\"seat_direction\"] = seatDirection;\n                seatJson[\"floor_no\"] = indexOfColon >= 0 ? coach_details[i3].floorNo : berthLower ? 0 : berthUpper ? 1 : floor ? \"\" : 0;\n                seatJson[\"berthType\"] = berthType;\n                seatJson[\"number\"] = coach_details[i3].seatNumber;\n                seatJson[\"row_id\"] = coach_details[i3].rowId;\n                seatJson[\"col_id\"] = coach_details[i3].colId;\n                seatJson[\"is_seat\"] = true;\n                seatJson[\"is_gangway\"] = isGangway;\n                seatJson[\"is_horizontal\"] = false;\n                if (!isGangway) {\n                    seatJson[\"discount_amount\"] = 0;\n                    seatJson[\"net_amount\"] = fare - seatJson[\"discount_amount\"];\n                }\n                seat_details.push(seatJson);\n            }\n            let stages = [];\n            let coachDetails = {\n                total_seats: coach_details.length,\n                available_seats: available.length,\n                driver_position: \"left\",\n                seat_details: seat_details\n            };\n            let obj = {\n                origin: {\n                    id: +serviceDetails.origin_id\n                },\n                destination: {\n                    id: +serviceDetails.destination_id\n                },\n                available_seats: serviceDetails.available_seats,\n                total_available_seats: availableSeats,\n                dep_time: serviceDetails.dep_time,\n                arr_time: serviceDetails.arr_time,\n                duration: serviceDetails.duration,\n                bus_type: serviceDetails.bus_type,\n                no_of_wagons: floors.length,\n                cost: serviceDetails.cost,\n                coach_details: coachDetails,\n                stage_details: stages,\n                boarding_stages: serviceDetails.bus_layout.boarding_stages,\n                dropoff_stages: serviceDetails.bus_layout.dropoff_stages,\n                travel_id: serviceDetails.travel_id,\n                res_details: serviceDetails.res_details,\n                id: serviceDetails.id\n            };\n            let retObj = JSON.parse(JSON.stringify(obj));\n            obj = null;\n            // console.log('seat_details', seat_details, obj);\n            return retObj;\n        } catch (e) {\n            // console.log(\"coachlayot\", e);\n            return null;\n        }\n    },\n    setSeatLayout: (serviceDetails, route)=>{\n        try {\n            let coachLayoutJson = [];\n            let upperAvalibility;\n            let originStageDetails;\n            let destinationStageDetails;\n            let errorMessage;\n            if (serviceDetails.code === 416) {\n                errorMessage = serviceDetails.message;\n            } else {\n                let seatDetails = serviceDetails.coach_details.seat_details;\n                for (let seat of seatDetails){\n                    // console.log(\"SEAT IS SEAT IS SEAT IS---------\", seat);\n                    if (!(CommonService.isTrain() || serviceDetails.travel_id == 272)) {\n                        if (typeof coachLayoutJson[seat.row_id] === \"undefined\") {\n                            coachLayoutJson[seat.row_id] = [];\n                        }\n                    } else {\n                        if (typeof coachLayoutJson[seat.floor_no] === \"undefined\") {\n                            coachLayoutJson[seat.floor_no] = [];\n                        }\n                        if (typeof coachLayoutJson[seat.floor_no][seat.row_id] === \"undefined\") {\n                            coachLayoutJson[seat.floor_no][seat.row_id] = [];\n                        }\n                    }\n                    let currentSeatJson = {};\n                    let berthTextPos = seat.type.indexOf(\"Berth\");\n                    currentSeatJson.rowSpan = berthTextPos !== -1 ? 2 : 1;\n                    currentSeatJson.isBerth = berthTextPos !== -1 ? true : false;\n                    currentSeatJson.isReservable = seat.available;\n                    currentSeatJson.berthType = seat.berthType;\n                    currentSeatJson.isUpper = seat.floor_no ? seat.floor_no === 1 : false;\n                    if (currentSeatJson.isUpper) {\n                        upperAvalibility = currentSeatJson.isUpper;\n                    }\n                    currentSeatJson.isLower = !currentSeatJson.isUpper;\n                    currentSeatJson.object = seat;\n                    currentSeatJson.number = seat.number;\n                    currentSeatJson.isLadiesSeat = seat.is_ladies_seat;\n                    currentSeatJson.isGentsSeat = seat.is_gents_seat;\n                    currentSeatJson.type = seat.type;\n                    currentSeatJson.isGangWay = seat.type.indexOf(\"Gang\") !== -1;\n                    currentSeatJson.isBreak = seat.type.indexOf(\"Break\") !== -1;\n                    currentSeatJson.isSelected = false;\n                    if (!(CommonService.isTrain() || serviceDetails.travel_id == 272)) {\n                        coachLayoutJson[seat.row_id][seat.col_id] = currentSeatJson;\n                    } else {\n                        coachLayoutJson[seat.floor_no][seat.row_id][seat.col_id] = currentSeatJson;\n                    }\n                }\n                originStageDetails = serviceDetails.boarding_stages;\n                destinationStageDetails = serviceDetails.dropoff_stages;\n                let boardingStage = originStageDetails.length == 1 ? originStageDetails[0] : null;\n                let droppingStage = destinationStageDetails.length == 1 ? destinationStageDetails[0] : null;\n                return {\n                    coachLayoutJson: coachLayoutJson,\n                    originStageDetails: originStageDetails,\n                    destinationStageDetails: destinationStageDetails,\n                    boardingStage: boardingStage,\n                    droppingStage: droppingStage,\n                    upperAvalibility: upperAvalibility,\n                    route: route\n                };\n            }\n        } catch (e) {\n            console.log(\"Exception in seat-laout.ts --> defaultCall() --> apiFactory.getServiceDetails(path)\", e);\n        }\n    },\n    transpose: (matrix)=>{\n        return matrix.reduce((prev, next)=>next.map((item, i)=>(prev[i] || []).concat(next[i])), []);\n    },\n    selectSeat: (seat, metaData, coachLayout, selectedSeatsToBook, selectedService)=>{\n        if (!seat.object.available) {\n            return \"NO_AVAILABLE\";\n        }\n        try {\n            let bookingDetails = {};\n            let currentSeat = seat;\n            let selectedSeatsNumbers = \"\";\n            selectedSeatsToBook = CommonService.copyObject(selectedSeatsToBook ? selectedSeatsToBook : []);\n            let coachLayoutLocal = CommonService.copyObject(coachLayout);\n            let currentSeatJson = coachLayoutLocal[currentSeat[\"object\"].row_id][currentSeat[\"object\"].col_id];\n            if (selectedSeatsToBook.length < (metaData && metaData.max_seats_allowed_by_op[selectedService.travel_id] ? metaData.max_seats_allowed_by_op[selectedService.travel_id] : metaData.max_seats_allowed) || currentSeatJson.isSelected) {\n                currentSeatJson.isSelected = !currentSeatJson.isSelected;\n                if (currentSeatJson.isSelected) {\n                    selectedSeatsToBook.push(seat.object);\n                } else {\n                    selectedSeatsToBook.splice(selectedSeatsToBook.findIndex((item)=>{\n                        if (item.number === seat.object.number) {\n                            item.passengerName = \"\";\n                            item.age = \"\";\n                        }\n                        return item.number === seat.object.number;\n                    }), 1);\n                }\n                let totalBookingAmount = 0;\n                let selectedSeats = [];\n                let selectedSeatTypes = {};\n                for(var i = 0; i < selectedSeatsToBook.length; i++){\n                    totalBookingAmount += +selectedSeatsToBook[i].fare;\n                    selectedSeats.push(selectedSeatsToBook[i].floor_no + 1 + \"_\" + selectedSeatsToBook[i].number);\n                    if (!selectedSeatTypes[selectedSeatsToBook[i].type]) {\n                        selectedSeatTypes[selectedSeatsToBook[i].type] = [];\n                    }\n                    selectedSeatTypes[selectedSeatsToBook[i].type].push(CommonService.copyObject(selectedSeatsToBook[i]));\n                }\n                for(let key in selectedSeatTypes){\n                    let seatNumbers = [];\n                    for (let type of selectedSeatTypes[key]){\n                        seatNumbers.push(type.number);\n                    }\n                    selectedSeatTypes[key][0][\"seatNumbers\"] = seatNumbers.join(\",\");\n                }\n                selectedSeatsNumbers = selectedSeats.join(\",\");\n                // discountAmount = this.commonService.calculateAmountByPercentage(totalBookingAmount,metaData.discountPercentage);\n                let discountAmount = 0;\n                let netBookingAmount = totalBookingAmount - discountAmount;\n                // -------------------- Fare charges details --------------------\n                bookingDetails.totalBookingAmount = totalBookingAmount;\n                bookingDetails.netBookingAmount = netBookingAmount;\n                bookingDetails.discountAmount = discountAmount;\n                bookingDetails.selectedSeatsToBook = selectedSeatsToBook;\n                bookingDetails.selectedSeatsNumbers = selectedSeatsNumbers;\n                bookingDetails.selectedSeatTypes = selectedSeatTypes;\n                bookingDetails.coachLayout = coachLayoutLocal;\n                return bookingDetails;\n            } else {\n                return \"MAX_SEATS_ERROR\";\n            }\n        } catch (e) {\n            console.log(\"SelectseatsController_selectSeatFunction\", e);\n        }\n    },\n    setLocal: (key, val)=>{\n        localStorage.setItem(key, JSON.stringify(val));\n    },\n    getLocal: (key)=>{\n        let val = localStorage.getItem(key);\n        if (val) return JSON.parse(val);\n    },\n    removeLocal: (key)=>{\n        let val = localStorage.removeItem(key);\n    },\n    getServiceFilters: (routes, metaData)=>{\n        let filters = {\n            operators: {\n                title: \"BUS_COMAPNIES\",\n                type: \"operator\",\n                options: []\n            },\n            seatTypes: {\n                title: \"SEAT_TYPES\",\n                type: \"seat_types\",\n                options: []\n            },\n            amenities: {\n                title: \"AMENITIES\",\n                type: \"amenities\",\n                options: []\n            }\n        };\n        let seatTypes = [];\n        let operators = [];\n        let amenities = [];\n        for (let r of routes){\n            let fareStr = r.fare_str.split(\",\");\n            for (let f of fareStr){\n                let type = f.split(\":\")[0].replace(/ /g, \"-\").toLowerCase();\n                let type2;\n                if (type.toLowerCase().indexOf(\"semi\") > -1) {\n                    type2 = \"Semi Cama\";\n                } else if (type.toLowerCase().indexOf(\"vent\") > -1) {\n                    type2 = \"Salon Sin Vent\";\n                } else if (type.toLowerCase().indexOf(\"salon\") > -1) {\n                    type2 = \"Salon Cama\";\n                } else if (type.toLowerCase().indexOf(\"ejecutivo\") > -1) {\n                    type2 = \"Cama Ejecutivo\";\n                } else if (type.toLowerCase().indexOf(\"suite\") > -1) {\n                    type2 = \"Cama Suite\";\n                } else if (type.toLowerCase().indexOf(\"vip\") > -1) {\n                    type2 = \"Cama VIP\";\n                } else if (type.toLowerCase().indexOf(\"preferente\") > -1) {\n                    type2 = \"Preferente\";\n                } else if (type.toLowerCase() == \"cama\") {\n                    type2 = \"Cama\";\n                } else if (type.toLowerCase() == \"clasico\") {\n                    type2 = \"Clasico\";\n                }\n                if (seatTypes.indexOf(type2) === -1) {\n                    seatTypes.push(type2);\n                }\n            }\n            if (operators.indexOf(r.operator_service_name) === -1) {\n                operators.push(r.operator_service_name);\n            }\n            if (metaData) {\n                let amArr = r.operator_details[4];\n                for (let a of amArr){\n                    if (a) {\n                        let am = metaData.amenities[a].split(\".\")[0].toLowerCase();\n                        if (amenities.indexOf(am) === -1) {\n                            amenities.push(am);\n                        }\n                    }\n                }\n            }\n        }\n        for (let s of seatTypes){\n            if (s) filters.seatTypes.options.push({\n                label: s.replace(/-/g, \" \"),\n                value: s\n            });\n        }\n        for (let o of operators.sort()){\n            filters.operators.options.push({\n                label: o,\n                value: o\n            });\n        }\n        if (metaData) {\n            for (let a1 of amenities){\n                if (a1) filters.amenities.options.push({\n                    label: getAmenityName(a1.split(\".\")[0].split(\"_\").join(\" \")),\n                    value: a1\n                });\n            }\n        }\n        return filters;\n    },\n    getAgencyHeaders: ()=>{\n        const headers = {};\n        // set(headers, 'Content-Type', 'text/plain');\n        (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"Accept\", \"*/*\");\n        (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"Content-Type\", \"application/json\");\n        (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"Accept-Encoding\", \"gzip, deflate, br\");\n        (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"Connection\", \"keep-alive\");\n        return headers;\n    },\n    getHeaders: (param)=>{\n        let { isPassengerInfo , hasFile  } = param;\n        const headers = {};\n        (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"category_type\", \"1\");\n        (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"Accept\", \"application/json\");\n        if (!hasFile) (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"Content-Type\", \"application/json; charset=utf-8\");\n        else (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"Content-Type\", \"multipart/form-data\");\n        (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"language\", i18next__WEBPACK_IMPORTED_MODULE_3__[\"default\"].language);\n        if (token) (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"Authorization\", \"Bearer \".concat(token));\n        try {\n            if (isPassengerInfo) {\n                (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"x-is-psi\", \"true\");\n            }\n            return headers;\n        } catch (e) {\n            console.log(e);\n        }\n    },\n    getAtHeaders: ()=>{\n        const headers = {};\n        (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"Accept\", \"application/json\");\n        (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"Content-Type\", \"application/json; charset=utf-8\");\n        (0,lodash__WEBPACK_IMPORTED_MODULE_2__.set)(headers, \"api_key\", \"012345678\");\n        return headers;\n    },\n    getStringWithoutAccent: (str)=>{\n        if (str) {\n            return str.toLowerCase().replace(\"\\xf1\", \"n\").replace(\"\\xe1\", \"a\").replace(\"\\xe9\", \"e\").replace(\"\\xf3\", \"o\").replace(\"\\xed\", \"i\").replace(\"\\xfa\", \"u\");\n        }\n    },\n    getAddressWithoutAccent: (str)=>{\n        // console.log(\"String rec is----\", str)\n        if (str) {\n            let newStr = str.split(\"----\").join(\",\").toLowerCase().replace(\"\\xf1\", \"n\").replace(\"\\xe1\", \"a\").replace(\"\\xe9\", \"e\").replace(\"\\xf3\", \"o\").replace(\"\\xed\", \"i\").replace(\"\\xfa\", \"u\");\n            return newStr;\n        }\n    },\n    removeClass: (element, className)=>{\n        if (element) {\n            var classes = element.className.split(\" \");\n            var i = classes.indexOf(className);\n            if (i >= 0) classes.splice(i, 1);\n            element.className = classes.join(\" \");\n        }\n    },\n    add: (element, name)=>{\n        if (element) {\n            var name, arr;\n            arr = element.className.split(\" \");\n            if (arr.indexOf(name) == -1) {\n                element.className += \" \" + name;\n            }\n        }\n    },\n    isElementInView: (el)=>{\n        if (el) {\n            var rect = el.getBoundingClientRect();\n            return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);\n        }\n    },\n    percentage: (number, per)=>{\n        return per / 100 * number;\n    },\n    isTrain: ()=>{\n        return window.location.pathname.indexOf(\"/pasajes-tren\") > -1 || window.location.pathname.indexOf(\"/train-tickets\") > -1 || window.location.pathname.indexOf(\"/train\") > -1;\n    },\n    isBookingScreen: ()=>{\n        return window.location.pathname.indexOf(\"booking\") > -1;\n    },\n    isATBookingScreen: ()=>{\n        return window.location.pathname.indexOf(\"transfer/payment\") > -1 || window.location.pathname.indexOf(\"transfer/payment\") > -1;\n    },\n    isBusOrTrain: ()=>{\n        return window.location.pathname.indexOf(\"/pasajes-tren\") > -1 || window.location.pathname.indexOf(\"/train-tickets\") > -1 || window.location.pathname.indexOf(\"/pasajes-tren\") > -1 || window.location.pathname.indexOf(\"/train\") > -1 || window.location.pathname.indexOf(\"/pasajes-bus\") > -1 || window.location.pathname.indexOf(\"/bus-tickets\") > -1 || window.location.pathname.indexOf(\"/bus/\") > -1;\n    },\n    isUniRed: (path)=>{\n        if (path) {\n            if (path == \"/unired\") return true;\n        }\n        return false;\n    },\n    isSanpedronline: (path)=>{\n        let widget_src = sessionStorage.getItem(\"widget_source\");\n        if (path) {\n            if (path == \"/sanpedronline\" || widget_src == \"sanpedroline\") return true;\n        }\n        return false;\n    },\n    isSanpedronline: (path)=>{\n        let widget_src = sessionStorage.getItem(\"widget_source\");\n        if (path) {\n            if (path == \"/sanpedronline\" || widget_src == \"sanpedroline\") return true;\n        }\n        return false;\n    },\n    isBusesGomez: (path)=>{\n        if (path) {\n            if (path == \"/buses-gomez\") return true;\n        }\n        return false;\n    },\n    isBusesTorres: (path)=>{\n        if (path) {\n            if (path == \"/buses-torres\") return true;\n        }\n        return false;\n    },\n    isHome: (path)=>{\n        if (path) {\n            if (path == \"/es\" || path == \"/es/pasajes-bus\" || path == \"/es/pasajes-tren\" || path == \"/es/traslados\" || path == \"/es/carga-bip\" || path == \"/es/kupos-pool\" || path == \"/es/viajes-especiales\" || path == \"/en\" || path == \"/en/bus-tickets\" || path == \"/en/train-tickets\" || path == \"/en/transfer\" || path == \"/en/bip-recharge\" || path == \"/en/kupos-pool\" || path == \"/en/private-transport\" || path == \"/es/\" || path == \"/es/pasajes-bus/\" || path == \"/es/pasajes-tr/en/\" || path == \"/es/traslados/\" || path == \"/es/carga-bip/\" || path == \"/es/kupos-pool/\" || path == \"/es/viajes-especiales/\" || path == \"/en/\" || path == \"/en/bus-tickets/\" || path == \"/en/train-tickets/\" || path == \"/en/transfer/\" || path == \"/en/bip-recharge/\" || path == \"/en/kupos-pool/\" || path == \"/en/private-transport/\") return true;\n        }\n        return false;\n    },\n    fillPassengerAutoData: ()=>{\n        setTimeout(()=>{\n            let passengerDetailsOnward = CommonService.copyObject(undefined.props.pbPaymentDetails.passengerDetailsOnward);\n            passengerDetailsOnward[0].name = undefined.props.common.loginData ? undefined.props.common.loginData.name : null;\n            passengerDetailsOnward[0].last_name = undefined.props.common.loginData ? undefined.props.common.loginData.last_name : null;\n            passengerDetailsOnward[0].idCardType = undefined.props.common.loginData && Object.keys(undefined.props.common.loginData).length ? undefined.idCardTypes.find((it)=>it.value == undefined.props.common.loginData.identity_type) : undefined.idCardTypes.find((it)=>it.value == 7), passengerDetailsOnward[0].idCardNumber = undefined.props.common.loginData && Object.keys(undefined.props.common.loginData).length ? undefined.props.common.loginData.identity_val : null;\n            undefined.props.actions.setPassengerDetailsOnward(passengerDetailsOnward);\n            let contactDetails = {\n                countryCode: undefined.countrieCodes && undefined.countrieCodes[0] ? undefined.countrieCodes[0].name : \"\",\n                mobile: undefined.props.common.loginData ? undefined.props.common.loginData.phone : null,\n                email: undefined.props.common.loginData ? undefined.props.common.loginData.email : null,\n                confirmEmail: undefined.props.common.loginData ? undefined.props.common.loginData.email : null\n            };\n            undefined.props.actions.setContactDetails(contactDetails);\n            CommonService.loginCallbackFunction = null;\n        }, 300);\n    },\n    getParameterByName: (name, url)=>{\n        if (true) {\n            if (!url) url = window.location.href;\n            name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n            var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"), results = regex.exec(url);\n            if (!results) return null;\n            if (!results[2]) return \"\";\n            return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n        }\n    },\n    objToQuery: (obj)=>{\n        var parts = [];\n        for(var key in obj){\n            if (obj.hasOwnProperty(key)) {\n                parts.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(obj[key]));\n            }\n        }\n        return \"?\" + parts.join(\"&\");\n    },\n    ceilNumber: function(rnum) {\n        let rlength = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        var newnumber = Math.ceil(rnum * Math.pow(10, rlength)) / Math.pow(10, rlength);\n        return newnumber;\n    },\n    getPosition: (string, subString, index)=>{\n        return string ? string.split(subString, index).join(subString).length : -1;\n    },\n    normalizeAddress: (address)=>{\n        return address ? address.substr(0, CommonService.getPosition(address, \",\", 2)) : \"\";\n    },\n    removeExtraSpacesInString: (str)=>{\n        return str ? str.replace(/  +/g, \" \") : \"\";\n    },\n    //analytics impressions added v2 by Raqib --- start\n    pushProductImpression: (event, data)=>{\n        (window.dataLayer || []).push({\n            event: event,\n            ecommerce: {\n                currencyCode: \"CLP\",\n                impressions: data\n            }\n        });\n    },\n    googleProductClick: (productObj)=>{\n        (window.dataLayer || []).push({\n            event: \"productClick\",\n            ecommerce: {\n                click: {\n                    actionField: {\n                        list: productObj.list,\n                        action: \"click\"\n                    },\n                    products: [\n                        productObj\n                    ]\n                }\n            }\n        });\n    },\n    pushSelectedSeats: (seatsSelected)=>{\n        (window.dataLayer || []).push({\n            event: \"detail\",\n            ecommerce: {\n                detail: {\n                    actionField: {\n                        list: seatsSelected[0].name.slice(4),\n                        action: \"detail\"\n                    },\n                    products: seatsSelected\n                }\n            }\n        });\n    },\n    pushSeatsAddedToCart: (productObj)=>{\n        (window.dataLayer || []).push({\n            event: \"addToCart\",\n            ecommerce: {\n                currencyCode: \"CLP\",\n                add: {\n                    products: [\n                        {\n                            name: productObj.name,\n                            price: productObj.price,\n                            brand: productObj.brand,\n                            category: productObj.category,\n                            variant: productObj.variant,\n                            quantity: productObj.quantity\n                        }\n                    ]\n                }\n            }\n        });\n    },\n    pushProductCheckout: (allSeats)=>{\n        (window.dataLayer || []).push({\n            event: \"checkout\",\n            ecommerce: {\n                checkout: {\n                    actionField: {\n                        step: 1,\n                        option: \"checkout\",\n                        action: \"checkout\"\n                    },\n                    products: allSeats\n                }\n            }\n        });\n    },\n    pushProductPurchase: (allSeats, transactionId, revenue)=>{\n        (window.dataLayer || []).push({\n            event: \"purchase\",\n            ecommerce: {\n                purchase: {\n                    actionField: {\n                        id: transactionId,\n                        affiliation: \"kupos.cl\",\n                        revenue: revenue,\n                        tax: \"0\"\n                    },\n                    products: allSeats\n                }\n            }\n        });\n    },\n    encodeUrlAddress: (string)=>{\n        return string.toLowerCase().replace(/, /g, \",\").split(\" - \").join(\"_\").replace(/ /g, \"-\").split(\"/\").join(\"\").replace(/_/g, \"--\");\n    },\n    decodeUrlAddress: (string)=>{\n        return string.split(\",\").join(\", \").split(\"--\").join(\"_\").split(\"-\").join(\" \").split(\"_\").join(\" - \").toLowerCase();\n    },\n    decodeBase64: function(s) {\n        var e = {}, i, b = 0, c, x, l = 0, a, r = \"\", w = String.fromCharCode, L = s.length;\n        var A = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n        for(i = 0; i < 64; i++){\n            e[A.charAt(i)] = i;\n        }\n        for(x = 0; x < L; x++){\n            c = e[s.charAt(x)];\n            b = (b << 6) + c;\n            l += 6;\n            while(l >= 8){\n                ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));\n            }\n        }\n        return r;\n    },\n    aesEncode: function(string) {\n        let k = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"somestringofexactthirtytwolength\", i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"0000000000000000\";\n        var key = CryptoJS.enc.Utf8.parse(k);\n        var iv = CryptoJS.enc.Utf8.parse(i);\n        var encrypted = CryptoJS.AES.encrypt(string, key, {\n            iv: iv,\n            mode: CryptoJS.mode.CBC\n        }).toString();\n        return encrypted;\n    },\n    aesDecode: function(string) {\n        let k = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"somestringofexactthirtytwolength\", i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"0000000000000000\";\n        var key = CryptoJS.enc.Utf8.parse(k);\n        var iv = CryptoJS.enc.Utf8.parse(i);\n        var bytes = CryptoJS.AES.decrypt(string, key, {\n            iv: iv,\n            mode: CryptoJS.mode.CBC\n        });\n        var decrypted = bytes.toString(CryptoJS.enc.Utf8);\n        return decrypted;\n    },\n    metaSecret: function(string) {\n        let store = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        try {\n            let decode64 = atob(string);\n            let c = decode64.split(\"@kupos@\");\n            let s = CommonService.aesDecode((c[0] || \"\").split(\"\\n\").join(\"\"), c[1]);\n            if (store) CommonService.jwt_key = s;\n            return s;\n        } catch (e) {\n            console.log(e);\n        }\n    },\n    formatCities: (cities)=>{\n        let formattedCities = [];\n        for (let city of cities){\n            formattedCities.push({\n                value: city[1],\n                label: city[0]\n            });\n        }\n        return formattedCities;\n    },\n    formatCitiesNew: (cities)=>{\n        let formattedCities = [];\n        Object.values(cities).forEach((city)=>{\n            formattedCities.push({\n                value: city[1],\n                label: city[0]\n            });\n        });\n        return formattedCities;\n    },\n    encodeCity: (city)=>{\n        return (city || \"\").replace(/-/g, \"_\").replace(/ /g, \"-\").replace(/_/g, \"--\").toLowerCase();\n    },\n    decodeCity: (city)=>{\n        return (city || \"\").split(\"--\").join(\"+\").split(\"-\").join(\" \").split(\"+\").join(\"-\").toLowerCase();\n    },\n    getOriginSelectedFilteredDestinations: (rawArray, itemToRemove)=>{\n        if (rawArray && itemToRemove) {\n            return rawArray.map(function(obj) {\n                if (obj.label == itemToRemove.label) {} else {\n                    return obj;\n                }\n            }).filter(function(obj) {\n                return typeof obj !== \"undefined\";\n            });\n        } else if (!itemToRemove) {}\n    },\n    setLocalEncryp: (key, value)=>{\n        localStorage.setItem(key, js_base64__WEBPACK_IMPORTED_MODULE_4__.Base64.encode(JSON.stringify(value)));\n    },\n    getLocalEncryp: (key)=>{\n        try {\n            let localData = localStorage.getItem(key);\n            if (localData) return JSON.parse(js_base64__WEBPACK_IMPORTED_MODULE_4__.Base64.decode(localData));\n            return null;\n        } catch (e) {\n            return null;\n        }\n    },\n    setSessionEncryp: (key, value)=>{\n        sessionStorage.setItem(key, js_base64__WEBPACK_IMPORTED_MODULE_4__.Base64.encode(JSON.stringify(value)));\n    },\n    getSessionEncryp: (key)=>{\n        try {\n            let localData = sessionStorage.getItem(key);\n            if (localData) return JSON.parse(js_base64__WEBPACK_IMPORTED_MODULE_4__.Base64.decode(localData));\n            return null;\n        } catch (e) {\n            return null;\n        }\n    },\n    jwt_key: \"\",\n    newSearchFunction: null,\n    clearSearchFunction: null,\n    newSearchTranserFunction: null,\n    loginCallbackFunction: null,\n    passengerDetailsOnward: null,\n    passengerDetailsReturn: null,\n    passengerContactDetails: null\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (CommonService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bEssS0FBS25NLG9EQUFhLENBQUMrRCxLQUFLQyxTQUFTLENBQUM0RDtJQUMzRDtJQUNBc2Esa0JBQWtCLENBQUMvVixNQUFRO1FBQ3pCLElBQUk7WUFDRixJQUFJdkksWUFBWXNXLGVBQWVwVyxPQUFPLENBQUNxSTtZQUN2QyxJQUFJdkksV0FBVyxPQUFPRyxLQUFLaUYsS0FBSyxDQUFDaEosb0RBQWEsQ0FBQzREO1lBQy9DLE9BQU8sSUFBSTtRQUNiLEVBQUUsT0FBTytPLEdBQUc7WUFDVixPQUFPLElBQUk7UUFDYjtJQUNGO0lBQ0FzTyxTQUFTO0lBQ1RrQixtQkFBbUIsSUFBSTtJQUN2QkMscUJBQXFCLElBQUk7SUFDekJDLDBCQUEwQixJQUFJO0lBQzlCM0csdUJBQXVCLElBQUk7SUFDM0JsQix3QkFBd0IsSUFBSTtJQUM1QjhILHdCQUF3QixJQUFJO0lBQzVCQyx5QkFBeUIsSUFBSTtBQUMvQjtBQUVBLCtEQUFlcmUsYUFBYUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zZXJ2aWNlcy9jb21tb25TZXJ2aWNlLmpzPzg0NmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY3VycmVuY3lGb3JtYXR0ZXIgZnJvbSBcImN1cnJlbmN5LWZvcm1hdHRlclwiO1xuaW1wb3J0ICogYXMgc2hhMSBmcm9tIFwianMtc2hhMVwiO1xuXG5pbXBvcnQgeyBpc0VtcHR5LCBzZXQsIHRvSW50ZWdlciB9IGZyb20gXCJsb2Rhc2hcIjtcblxuaW1wb3J0IHsgQmFzZTY0IH0gZnJvbSBcImpzLWJhc2U2NFwiO1xuaW1wb3J0IGkxOG5leHQgZnJvbSBcImkxOG5leHRcIjtcblxudmFyIENyeXB0b0pTID0gcmVxdWlyZShcImNyeXB0by1qc1wiKTtcbnZhciBnbG9iYWwgPSB7fTtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGdsb2JhbCA9IHdpbmRvdztcbn1cblxuY29uc3Qgc2VhdElkZW50aWZpZXJzID0ge1xuICBcIi5HWVwiOiBcIkdhbmd3YXlcIixcbiAgXCIuRFJfSU1HXCI6IFwiRHJpdmVyIEltYWdlXCIsXG4gIFwiLlNUX0lNR1wiOiBcIlN0cmFpcnMgSW1hZ2VcIixcbiAgXCIuV1JfSU1HXCI6IFwiV2FzaCBSb29tIEltYWdlXCIsXG4gIFwiLkJSXCI6IFwiQnJlYWtcIixcbiAgR1k6IFwiR2FuZ3dheVwiLFxuICBEUl9JTUc6IFwiRHJpdmVyIEltYWdlXCIsXG4gIFNUX0lNRzogXCJTdHJhaXJzIEltYWdlXCIsXG4gIFdSX0lNRzogXCJXYXNoIFJvb20gSW1hZ2VcIixcbiAgQlI6IFwiQnJlYWtcIixcbiAgU1M6IFwiU2VtaSBTbGVlcGVyXCIsXG4gIExCOiBcIkxvd2VyIEJlcnRoXCIsXG4gIFVCOiBcIlVwcGVyIEJlcnRoXCIsXG4gIEJTOiBcIkNMQVNJQ09cIixcbiAgUEI6IFwiQ0xBU0lDT1wiLFxuICBOUEI6IFwiQ0xBU0lDT1wiLFxuICBTTEI6IFwiQ0xBU0lDT1wiLFxuICBTVUI6IFwiQ0xBU0lDT1wiLFxuICBTU1Q6IFwiQ0xBU0lDT1wiLFxuICBOQTogXCJDTEFTSUNPXCIsXG4gIFNUOiBcIkNMQVNJQ09cIixcbiAgRExCOiBcIkNMQVNJQ09cIixcbiAgRFVCOiBcIkNMQVNJQ09cIixcbiAgV1NTOiBcIkNMQVNJQ09cIixcbiAgV1NUOiBcIkNMQVNJQ09cIixcbiAgV0xCOiBcIkNMQVNJQ09cIixcbiAgV1VCOiBcIkNMQVNJQ09cIixcbiAgV1NMOiBcIkNMQVNJQ09cIixcbiAgV1NVOiBcIkNMQVNJQ09yXCIsXG4gIEJVOiBcIkNMQVNJQ09cIixcbiAgRUM6IFwiU2VtaSBDYW1hXCIsXG4gIFwiU0VNSSBDQU1BXCI6IFwiU0VNSSBDQU1BXCIsXG4gIFNFTUlfQ0FNQTogXCJTRU1JIENBTUFcIixcbiAgXCJTQUxPTiBDQU1BXCI6IFwiU0FMT04gQ0FNQVwiLFxuICBTQUxPTkNBTUE6IFwiU0FMT04gQ0FNQVwiLFxuICBTQUxPTl9DQU1BOiBcIlNBTE9OIENBTUFcIixcbiAgQ0xBU0lDTzogXCJDbGFzaWNvXCIsXG4gIEVKRUNVVElWTzogXCJFamVjdXRpdm9cIixcbiAgUFJFTUlVTTogXCJQcmVtaXVtXCIsXG4gIFByZW1pdW06IFwiUHJlbWl1bVwiLFxuICBcIkNBTUEgUFJFTUlVTVwiOiBcIkNBTUEgUFJFTUlVTVwiLFxuICBcIkNhbWEgUHJlbWl1bVwiOiBcIkNBTUEgUFJFTUlVTVwiLFxuICBcImNhbWEgcHJlbWl1bVwiOiBcIkNBTUEgUFJFTUlVTVwiLFxuICBQUkVGRVJFTlRFOiBcIlBSRU1JVU1cIixcbiAgUHJlZmVyZW50ZTogXCJQUkVGRVJFTlRFXCIsXG4gIHByZWZlcmVudGU6IFwiUFJFRkVSRU5URVwiLFxuICBcIkNBTUEgU1VJVEVcIjogXCJDQU1BIFNVSVRFXCIsXG4gIFwiQ2FtYSBTdWl0ZVwiOiBcIkNBTUEgU1VJVEVcIixcbiAgXCJjYW1hIHN1aXRlXCI6IFwiQ0FNQSBTVUlURVwiLFxuICBcIlBSRU1JVU0gUFJPTU9cIjogXCJQUkVNSVVNIFBST01PXCIsXG4gIFwiUHJlbWl1bSBQcm9tb1wiOiBcIlBSRU1JVU0gUFJPTU9cIixcbiAgXCJwcmVtaXVtIHByb21vXCI6IFwiUFJFTUlVTSBQUk9NT1wiLFxuXG4gIFwiQ0FNQSBWSVBcIjogXCJDQU1BIFZJUFwiLFxuICBcIkNhbWEgVmlwXCI6IFwiQ0FNQSBWSVBcIixcbiAgXCJjYW1hIHZpcFwiOiBcIkNBTUEgVklQXCIsXG5cbiAgXCJTVUlURSBDQU1BXCI6IFwiU1VJVEUgQ0FNQVwiLFxuICBcIlN1aXRlIENhbWFcIjogXCJTVUlURSBDQU1BXCIsXG4gIFwic3VpdGUgY2FtYVwiOiBcIlNVSVRFIENBTUFcIixcblxuICBTQzogXCJTZW1pIENhbWFcIixcbiAgQ086IFwiQ0xBU0lDT1wiLFxuICBFWDogXCJTQUxPTiBDQU1BXCIsXG4gIFNQOiBcIkNMQVNJQ09cIixcbiAgU0FMT046IFwiU0FMT04gQ0FNQVwiLFxuICBcIlNBTE9OIE1JWFRPXCI6IFwiU0FMT04gQ0FNQVwiLFxuICBTRU1JQ0FNQTogXCJTRU1JIENBTUFcIixcbiAgXCJTZW1pIENhbWFcIjogXCJTRU1JIENBTUFcIixcbiAgQ0FNQTogXCJTQUxPTiBDQU1BXCIsXG4gIENPTVVOOiBcIkNMQVNJQ09cIixcbiAgXCJDT01VTiBDT04gQUlSRVwiOiBcIkNMQVNJQ09cIixcbiAgXCJDb211biBjb24gQWlyZVwiOiBcIkNMQVNJQ09cIixcbiAgU0NBOiBcIkNMQVNJQ09cIixcblxuICBTYWxvbjogXCJTQUxPTiBDQU1BXCIsXG4gIFwiU2Fsb24gU2luIFZlbnRcIjogXCJTQUxPTiBTSU4gVkVOVFwiLFxuICBcIkJpbyBCaW8gU3VwZXJpb3JcIjogXCJCSU8gQklPIFNVUEVSSU9SXCIsXG59O1xuXG5jb25zdCBnZXRTZWF0VHlwZSA9ICh0eXBlLCBzZWF0SWRzKSA9PiB7XG4gIGxldCB0eXBlcyA9IHNlYXRJZHM7XG4gIHJldHVybiB0eXBlc1t0eXBlXTtcbn07XG5cbmNvbnN0IGdldEFtZW5pdHlOYW1lID0gKHJhd0FuZW1pdHkpID0+IHtcbiAgc3dpdGNoIChyYXdBbmVtaXR5KSB7XG4gICAgY2FzZSBcIm1vYmlsZSB0aWNrZXRcIjpcbiAgICAgIHJldHVybiBcIlJFU1VMVFNfUEFHRS5NT0JJTEVfVElDS0VUXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2hhcmdpbmcgcGx1Z1wiOlxuICAgICAgcmV0dXJuIFwiUkVTVUxUU19QQUdFLkNIQVJHSU5HX1BMVUdcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ3aWZpXCI6XG4gICAgICByZXR1cm4gXCJSRVNVTFRTX1BBR0UuV0lGSVwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm1vdmllXCI6XG4gICAgICByZXR1cm4gXCJSRVNVTFRTX1BBR0UuRU5URVJUQUlOTUVOVFwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImJhZ2dhZ2VcIjpcbiAgICAgIHJldHVybiBcIlJFU1VMVFNfUEFHRS5CQUdHQUdFXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicmVzdHJvb21zXCI6XG4gICAgICByZXR1cm4gXCJSRVNVTFRTX1BBR0UuUkVTVFJPT01TXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYWlyIGNvbmR0aW9uXCI6XG4gICAgICByZXR1cm4gXCJSRVNVTFRTX1BBR0UuQUlSX0NPTkRJVElPTkVSXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic25hY2tzIG5ld1wiOlxuICAgICAgcmV0dXJuIFwiUkVTVUxUU19QQUdFLlNOQUNLU1wiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvZmZlZVwiOlxuICAgICAgcmV0dXJuIFwiUkVTVUxUU19QQUdFLkNPRkZFRVwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImdhbWluZ1wiOlxuICAgICAgcmV0dXJuIFwiUkVTVUxUU19QQUdFLkdBTUlOR1wiO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiByYXdBbmVtaXR5O1xuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbmxldCB0b2tlbjtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgbGV0IGxvY2FsRGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwibG9naW5EYXRhXCIpO1xuICBpZiAobG9jYWxEYXRhKSB7XG4gICAgKGxvY2FsRGF0YSA9IEpTT04uc3RyaW5naWZ5KEJhc2U2NC5kZWNvZGUobG9jYWxEYXRhKSkpO1xuICB9XG5cbiAgdG9rZW4gPSBsb2NhbERhdGE/LnRva2VuO1xufVxuXG5jb25zdCBDb21tb25TZXJ2aWNlID0ge1xuICB0b2FzdDoge30sXG4gIGZvcm1hdERhdGE6IChqc29uQXJyKSA9PiB7XG4gICAgaWYgKGpzb25BcnIpIHtcbiAgICAgIGxldCBrZXlzID0ganNvbkFyclswXTtcbiAgICAgIGxldCBjdXJyQXJyID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGpzb25BcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGN1cnJlbnRPYmogPSB7fTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY3VycmVudE9ialtrZXlzW2pdXSA9IGpzb25BcnJbaV1bal07XG4gICAgICAgIH1cbiAgICAgICAgY3VyckFyci5wdXNoKGN1cnJlbnRPYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGN1cnJBcnI7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZUNhcnRJdGVtOiAocHJvZHVjdCwgaW5jcmVhc2UsIGNhcnRMaXN0LCBzZXRDYXJ0TGlzdCkgPT4ge1xuICAgIGxldCBuZXdJdGVtc0FyciA9IFsuLi5jYXJ0TGlzdF07XG4gICAgbGV0IHF0eSA9IGluY3JlYXNlXG4gICAgICA/IHByb2R1Y3Q/LnF1YW50aXR5ICsgMVxuICAgICAgOiBwcm9kdWN0Py5xdWFudGl0eSA8PSAxXG4gICAgICA/IHByb2R1Y3Q/LnF1YW50aXR5IC0gMFxuICAgICAgOiBwcm9kdWN0Py5xdWFudGl0eSAtIDE7XG5cbiAgICBsZXQgdGVtcFByb2R1Y3QgPSB7XG4gICAgICAuLi5wcm9kdWN0LFxuICAgICAgW1wicXVhbnRpdHlcIl06IHF0eSxcbiAgICB9O1xuICAgIGxldCBwcm9kdWN0SW5kZXggPSBudWxsO1xuICAgIG5ld0l0ZW1zQXJyLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgaWYgKGl0ZW0uaWQgPT09IHByb2R1Y3Q/LmlkKSB7XG4gICAgICAgIHByb2R1Y3RJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBuZXdJdGVtc0Fyci5zcGxpY2UocHJvZHVjdEluZGV4LCAxLCB0ZW1wUHJvZHVjdCk7XG4gICAgc2V0Q2FydExpc3QobmV3SXRlbXNBcnIpO1xuICB9LFxuICBnZXRTZWF0TmFtZTogKHJhd1NlYXQpID0+IHtcbiAgICBzd2l0Y2ggKHJhd1NlYXQpIHtcbiAgICAgIGNhc2UgXCJTQUxPTiBDQU1BXCI6XG4gICAgICAgIHJldHVybiBcIlNhbMOzbiBDYW1hXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkNMQVNJQ09cIjpcbiAgICAgICAgcmV0dXJuIFwiQ2zDoXNpY29cIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQ2xhc2ljb1wiOlxuICAgICAgICByZXR1cm4gXCJDbMOhc2ljb1wiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjbGFzaWNvXCI6XG4gICAgICAgIHJldHVybiBcIkNsw6FzaWNvXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlNhbG9uIFNpbiBWZW50XCI6XG4gICAgICAgIHJldHVybiBcIlNhbMOzbiBTaW4gVmVudFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJTYWxvbiBQcmVmZXJlbnRlXCI6XG4gICAgICAgIHJldHVybiBcIlNhbMOzbiBQcmVmZXJlbnRlXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlNBTE9OIFNJTiBWRU5UXCI6XG4gICAgICAgIHJldHVybiBcIlNhbMOzbiBTaW4gVmVudFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJTQUxPTiBQUkVGRVJFTlRFXCI6XG4gICAgICAgIHJldHVybiBcIlNhbMOzbiBQcmVmZXJlbnRlXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlNBTE9OXCI6XG4gICAgICAgIHJldHVybiBcIlNhbMOzbiBcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiU2Fsb25cIjpcbiAgICAgICAgcmV0dXJuIFwiU2Fsw7NuIFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBDb21tb25TZXJ2aWNlLmNhcGl0YWxpemUocmF3U2VhdCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSxcbiAgY2FwaXRhbGl6ZTogKHN0cikgPT4ge1xuICAgIGlmIChzdHIpIHtcbiAgICAgIGxldCBzdHJBcnIgPSBzdHIuc3BsaXQoXCIgXCIpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3RyQXJyW2ldID1cbiAgICAgICAgICBzdHJBcnJbaV1bMF0gJiZcbiAgICAgICAgICBzdHJBcnJbaV1bMF0udG9VcHBlckNhc2UoKSArIHN0ckFycltpXS5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJBcnIuam9pbihcIiBcIik7XG4gICAgfVxuICAgIHJldHVybiBcIlwiO1xuICB9LFxuICByb3VuZDogKG51bWJlciwgZGlnaXQpID0+IHtcbiAgICBsZXQgcCA9IE1hdGgucG93KDEwLCBkaWdpdCk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyICogcCkgLyBwO1xuICB9LFxuXG4gIGdldFRpbWV6b25lT2Zmc2V0SW5Ib3Vyc0FuZE1pbnV0ZXM6ICgpID0+IHtcbiAgICBsZXQgb2Zmc2V0ID0gbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgbGV0IGhvdXJzID0gTWF0aC5hYnModG9JbnRlZ2VyKG9mZnNldCAvIDYwKSk7XG4gICAgbGV0IG1pbnV0ZXMgPSBDb21tb25TZXJ2aWNlLnByZVplcm8oTWF0aC5hYnMob2Zmc2V0ICUgNjApKTtcblxuICAgIHJldHVybiBDb21tb25TZXJ2aWNlLnByZVplcm8oaG91cnMpICsgXCI6XCIgKyBtaW51dGVzO1xuICB9LFxuXG4gIHNwbGl0UnV0QW5kRHY6IChydXQpID0+IHtcbiAgICBsZXQgY1ZhbHVlID0gcnV0LnJlcGxhY2UoL1tcXC5cXC1dL2csIFwiXCIpO1xuICAgIGlmIChjVmFsdWUubGVuZ3RoID09IDApIHJldHVybiBbbnVsbCwgbnVsbF07XG4gICAgaWYgKGNWYWx1ZS5sZW5ndGggPT0gMSkgcmV0dXJuIFtjVmFsdWUsIG51bGxdO1xuICAgIGxldCBjRHYgPSBjVmFsdWUuY2hhckF0KGNWYWx1ZS5sZW5ndGggLSAxKTtcbiAgICBsZXQgY1J1dCA9IGNWYWx1ZS5zdWJzdHJpbmcoMCwgY1ZhbHVlLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBbY1J1dCwgY0R2XTtcbiAgfSxcblxuICBmb3JtYXRSdXQ6ICh2YWx1ZSkgPT4ge1xuICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1suLV0vZywgXCJcIik7XG4gICAgaWYgKCh2YWx1ZSArIFwiXCIpLmxlbmd0aCA+IDkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKyBcIlwiO1xuICAgIH1cblxuICAgIGxldCBydXRBbmREdiA9IENvbW1vblNlcnZpY2Uuc3BsaXRSdXRBbmREdih2YWx1ZSk7XG4gICAgbGV0IGNSdXQgPSBydXRBbmREdlswXTtcbiAgICBsZXQgY0R2ID0gcnV0QW5kRHZbMV07XG4gICAgaWYgKCEoY1J1dCAmJiBjRHYpKSByZXR1cm4gY1J1dCB8fCB2YWx1ZTtcbiAgICBsZXQgcnV0RiA9IFwiXCI7XG4gICAgd2hpbGUgKGNSdXQubGVuZ3RoID4gMykge1xuICAgICAgcnV0RiA9IFwiLlwiICsgY1J1dC5zdWJzdHIoY1J1dC5sZW5ndGggLSAzKSArIHJ1dEY7XG4gICAgICBjUnV0ID0gY1J1dC5zdWJzdHJpbmcoMCwgY1J1dC5sZW5ndGggLSAzKTtcbiAgICB9XG4gICAgcmV0dXJuIGNSdXQgKyBydXRGICsgXCItXCIgKyBjRHY7XG4gIH0sXG5cbiAgaXNSdXRWYWxpZDogKHJ1dCkgPT4ge1xuICAgIGlmICh0eXBlb2YgcnV0ICE9PSBcInN0cmluZ1wiKSByZXR1cm4gZmFsc2U7XG4gICAgbGV0IGNSdXQgPSBydXQucmVwbGFjZSgvW1xcLlxcLV0vZywgXCJcIik7XG4gICAgaWYgKGNSdXQubGVuZ3RoIDwgMikgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBjRHYgPSBjUnV0LmNoYXJBdChjUnV0Lmxlbmd0aCAtIDEpLnRvVXBwZXJDYXNlKCk7XG4gICAgbGV0IG5SdXQgPSBwYXJzZUludChjUnV0LnN1YnN0cigwLCBjUnV0Lmxlbmd0aCAtIDEpKTtcbiAgICBpZiAoblJ1dCA9PT0gTmFOKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIENvbW1vblNlcnZpY2UuY29tcHV0ZUR2KG5SdXQpLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKSA9PT0gY0R2O1xuICB9LFxuXG4gIGlzUnV0OiAodHlwZSwgaWRDYXJkVHlwZXMpID0+IHtcbiAgICBpZiAoaWRDYXJkVHlwZXMpIHtcbiAgICAgIGxldCBjYXJkVHlwZSA9IGlkQ2FyZFR5cGVzLmZpbHRlcigodCkgPT4ge1xuICAgICAgICByZXR1cm4gdC5pZCA9PSB0eXBlO1xuICAgICAgfSk7XG4gICAgICBpZiAoXG4gICAgICAgIGNhcmRUeXBlICYmXG4gICAgICAgIGNhcmRUeXBlWzBdICYmXG4gICAgICAgIGNhcmRUeXBlWzBdLm5hbWUgJiZcbiAgICAgICAgY2FyZFR5cGVbMF0ubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJydXRcIikgPiAtMVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG5cbiAgY29tcHV0ZUR2OiAocnV0KSA9PiB7XG4gICAgbGV0IHN1bWEgPSAwO1xuICAgIGxldCBtdWwgPSAyO1xuICAgIGlmICh0eXBlb2YgcnV0ICE9PSBcIm51bWJlclwiKSByZXR1cm47XG4gICAgcnV0ID0gcnV0LnRvU3RyaW5nKCk7XG4gICAgZm9yIChsZXQgaSA9IHJ1dC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgc3VtYSA9IHN1bWEgKyBydXQuY2hhckF0KGkpICogbXVsO1xuICAgICAgbXVsID0gKG11bCArIDEpICUgOCB8fCAyO1xuICAgIH1cbiAgICBzd2l0Y2ggKHN1bWEgJSAxMSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gXCJrXCI7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIDExIC0gKHN1bWEgJSAxMSk7XG4gICAgfVxuICB9LFxuXG4gIGNvcHlPYmplY3Q6IChvYikgPT4ge1xuICAgIGlmICghb2IpIHJldHVybiB7fTtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYikpO1xuICB9LFxuXG4gIGlzRU1haWxWYWxpZDogKGVtYWlsKSA9PiB7XG4gICAgaWYgKGVtYWlsKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGVtYWlsLm1hdGNoKFxuICAgICAgICAgIC9eKFthLXpBLVowLTlfXFwuXFwtXSkrXFxAKChbYS16QS1aMC05XFwtXSkrXFwuKSsoW2EtekEtWjAtOV17Miw2fSkrJC9cbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgaXNNb2JpbGVWYWxpZDogKG1vYmlsZSkgPT4ge1xuICAgIGlmIChtb2JpbGUpIHtcbiAgICAgIGlmIChtb2JpbGUubWF0Y2goL15bMC05XXs5fSQvKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHN0b3JlTG9naW5EZXRhaWxzOiAobG9naW5EYXRhLCBzZXRMb2dpbkRhdGEsIGZyb21Ib21lID0gZmFsc2UpID0+IHtcbiAgICBnbG9iYWwudG9rZW4gPSBsb2dpbkRhdGEgPyBsb2dpbkRhdGEuYXV0aF90b2tlbiA6IG51bGw7XG4gICAgaWYgKGxvZ2luRGF0YSkge1xuICAgICAgaWYgKGxvZ2luRGF0YS5jYXJwb29sX2N1c3RvbWVyKSB7XG4gICAgICAgIGdsb2JhbC54QWNjZXNzID0gbG9naW5EYXRhLmNhcnBvb2xfY3VzdG9tZXIuYWNjZXNzX3Rva2VuO1xuICAgICAgfVxuICAgICAgaWYgKGxvZ2luRGF0YS5jYXJwb29sX2RyaXZlcikge1xuICAgICAgICBnbG9iYWwuZHJpdmVyWEFjY2VzcyA9IGxvZ2luRGF0YS5jYXJwb29sX2RyaXZlci5hY2Nlc3NfdG9rZW47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGdsb2JhbC54QWNjZXNzID0gbnVsbDtcbiAgICAgIGdsb2JhbC5kcml2ZXJYQWNjZXNzID0gbnVsbDtcbiAgICB9XG4gICAgc2V0TG9naW5EYXRhKGxvZ2luRGF0YSk7XG4gICAgaWYgKCFmcm9tSG9tZSlcbiAgICAgIGxvZ2luRGF0YVxuICAgICAgICA/IENvbW1vblNlcnZpY2Uuc2V0TG9jYWwoXCJsb2dpbkRhdGFcIiwgbG9naW5EYXRhKVxuICAgICAgICA6IENvbW1vblNlcnZpY2Uuc2V0TG9jYWwoXCJsb2dpbkRhdGFcIiwge30pO1xuICB9LFxuICBpc0xvZ2dlZEluOiAoKSA9PiB7XG4gICAgaWYgKCFnbG9iYWwudG9rZW4pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGxvZ291dDogKCkgPT4ge1xuICAgIGdsb2JhbC50b2tlbiA9IG51bGw7XG4gICAgQ29tbW9uU2VydmljZS5yZW1vdmVMb2NhbChcImdvb2dsZUFjY2Vzc1Rva2VuXCIpO1xuICAgIENvbW1vblNlcnZpY2UucmVtb3ZlTG9jYWwoXCJsb2dpbkRhdGFcIik7XG4gICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJzZWxlY3RlZExhbmd1YWdlXCIpO1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfSxcblxuICBnZXRTdGF0dXNOYW1lOiAoc3RhdHVzKSA9PiB7XG4gICAgbGV0IHMgPSB7XG4gICAgICBjb25maXJtZWQ6IFwiQ29uZmlybWFkb0lJXCIsXG4gICAgICBib29rZWQ6IFwiUmVzZXJ2YWRvc1wiLFxuICAgICAgY2FuY2VsbGVkOiBcIkFudWxhZG9cIixcbiAgICAgIHBlbmRpbmc6IFwiUGVuZGluZ1wiLFxuICAgICAgcGFydGlhbF9jYW5jZWxsZWQ6IFwiQ2FuY2VsZWRvIFBhcmNpYWxtZW50ZVwiLFxuICAgIH07XG4gICAgcmV0dXJuIHNbc3RhdHVzXTtcbiAgfSxcblxuICBwaG9uZU51bWJlckZvcm1hdDogKHRleHQsIGxlbiA9IDEwKSA9PiB7XG4gICAgaWYgKHRleHQpIHtcbiAgICAgIHRleHQgPSAodGV4dCArIFwiXCIpLnJlcGxhY2UoL1thLXpBLVpdL2csIFwiXCIpO1xuICAgICAgaWYgKCh0ZXh0ICsgXCJcIikubGVuZ3RoID4gbGVuKSB7XG4gICAgICAgIHRleHQgPSAodGV4dCArIFwiXCIpLnN1YnN0cigwLCBsZW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGV4dDtcbiAgfSxcblxuICBvbmx5TnVtYmVyczogKHRleHQpID0+IHtcbiAgICBpZiAodGV4dCkge1xuICAgICAgdGV4dCA9ICh0ZXh0ICsgXCJcIikucmVwbGFjZSgvW14wLTldL2csIFwiXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGV4dDtcbiAgfSxcblxuICBvbmx5Q2hhcnM6ICh0ZXh0KSA9PiB7XG4gICAgaWYgKHRleHQpIHtcbiAgICAgIHRleHQgPSAodGV4dCArIFwiXCIpLnJlcGxhY2UoL1teYS16QS1aXS9pLCBcIlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG4gIH0sXG5cbiAgb25seU51bWVyaWNWYWx1ZXM6ICh0ZXh0KSA9PiB7XG4gICAgaWYgKHRleHQubWF0Y2goL1teMC05XS9nKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICByZW1vdmVDb21tYXM6ICh0ZXh0KSA9PiB7XG4gICAgbGV0IG5ld1RleHQ7XG4gICAgdGV4dC5tYXAoKHZhbCkgPT4gKHZhbCAhPSBcIlwiID8gKG5ld1RleHQgPSB2YWwpIDogbnVsbCkpO1xuICAgIHJldHVybiBuZXdUZXh0O1xuICB9LFxuXG4gIGlzRXF1YWw6ICh2YWx1ZSwgb3RoZXIpID0+IHtcbiAgICAvLyBHZXQgdGhlIHZhbHVlIHR5cGVcbiAgICB2YXIgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cbiAgICAvLyBJZiB0aGUgdHdvIG9iamVjdHMgYXJlIG5vdCB0aGUgc2FtZSB0eXBlLCByZXR1cm4gZmFsc2VcbiAgICBpZiAodHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG90aGVyKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gSWYgaXRlbXMgYXJlIG5vdCBhbiBvYmplY3Qgb3IgYXJyYXksIHJldHVybiBmYWxzZVxuICAgIGlmIChbXCJbb2JqZWN0IEFycmF5XVwiLCBcIltvYmplY3QgT2JqZWN0XVwiXS5pbmRleE9mKHR5cGUpIDwgMCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ29tcGFyZSB0aGUgbGVuZ3RoIG9mIHRoZSBsZW5ndGggb2YgdGhlIHR3byBpdGVtc1xuICAgIHZhciB2YWx1ZUxlbiA9XG4gICAgICB0eXBlID09PSBcIltvYmplY3QgQXJyYXldXCIgPyB2YWx1ZS5sZW5ndGggOiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgIHZhciBvdGhlckxlbiA9XG4gICAgICB0eXBlID09PSBcIltvYmplY3QgQXJyYXldXCIgPyBvdGhlci5sZW5ndGggOiBPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoO1xuICAgIGlmICh2YWx1ZUxlbiAhPT0gb3RoZXJMZW4pIHJldHVybiBmYWxzZTtcblxuICAgIC8vIENvbXBhcmUgdHdvIGl0ZW1zXG4gICAgdmFyIGNvbXBhcmUgPSBmdW5jdGlvbiAoaXRlbTEsIGl0ZW0yKSB7XG4gICAgICAvLyBHZXQgdGhlIG9iamVjdCB0eXBlXG4gICAgICB2YXIgaXRlbVR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlbTEpO1xuXG4gICAgICAvLyBJZiBhbiBvYmplY3Qgb3IgYXJyYXksIGNvbXBhcmUgcmVjdXJzaXZlbHlcbiAgICAgIGlmIChbXCJbb2JqZWN0IEFycmF5XVwiLCBcIltvYmplY3QgT2JqZWN0XVwiXS5pbmRleE9mKGl0ZW1UeXBlKSA+PSAwKSB7XG4gICAgICAgIGlmICghQ29tbW9uU2VydmljZS5pc0VxdWFsKGl0ZW0xLCBpdGVtMikpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gT3RoZXJ3aXNlLCBkbyBhIHNpbXBsZSBjb21wYXJpc29uXG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHR3byBpdGVtcyBhcmUgbm90IHRoZSBzYW1lIHR5cGUsIHJldHVybiBmYWxzZVxuICAgICAgICBpZiAoaXRlbVR5cGUgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVtMikpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAvLyBFbHNlIGlmIGl0J3MgYSBmdW5jdGlvbiwgY29udmVydCB0byBhIHN0cmluZyBhbmQgY29tcGFyZVxuICAgICAgICAvLyBPdGhlcndpc2UsIGp1c3QgY29tcGFyZVxuICAgICAgICBpZiAoaXRlbVR5cGUgPT09IFwiW29iamVjdCBGdW5jdGlvbl1cIikge1xuICAgICAgICAgIGlmIChpdGVtMS50b1N0cmluZygpICE9PSBpdGVtMi50b1N0cmluZygpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGl0ZW0xICE9PSBpdGVtMikgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIENvbXBhcmUgcHJvcGVydGllc1xuICAgIGlmICh0eXBlID09PSBcIltvYmplY3QgQXJyYXldXCIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVMZW47IGkrKykge1xuICAgICAgICBpZiAoY29tcGFyZSh2YWx1ZVtpXSwgb3RoZXJbaV0pID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZSh2YWx1ZVtrZXldLCBvdGhlcltrZXldKSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIG5vdGhpbmcgZmFpbGVkLCByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuXG4gIGN1cnJlbmN5OiAoYW1vdW50KSA9PiB7XG4gICAgbGV0IGZvcm1hdHRlZEFtb3VudCA9IGN1cnJlbmN5Rm9ybWF0dGVyLmZvcm1hdChhbW91bnQsIHsgY29kZTogXCJDTFBcIiB9KTtcbiAgICByZXR1cm4gXCIkXCIgKyBmb3JtYXR0ZWRBbW91bnQucmVwbGFjZShcIiRcIiwgXCJcIikudHJpbSgpLnNwbGl0KFwiLFwiKVswXTtcbiAgfSxcblxuICBnZW5lcmF0ZVhBY2Nlc3M6IChrZXksIHRva2VuKSA9PiB7XG4gICAgbGV0IHRpbWVOb3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgbGV0IHQgPSBbdGltZU5vdywgc2hhMS5oZXgoW2tleSwgdG9rZW4sIHRpbWVOb3ddLmpvaW4oXCJcIikpXS5qb2luKFwiLlwiKTtcbiAgICByZXR1cm4gdDtcbiAgfSxcbiAgcHJlWmVybzogKG4pID0+IHtcbiAgICBpZiAobiA+IDkpIHtcbiAgICAgIHJldHVybiBuO1xuICAgIH1cbiAgICByZXR1cm4gXCIwXCIgKyBuO1xuICB9LFxuICBkaXN0YW5jZTogKHsgbGF0MSwgbG9uMSwgbGF0MiwgbG9uMiwgdW5pdCB9KSA9PiB7XG4gICAgaWYgKGxhdDEgPT0gbGF0MiAmJiBsb24xID09IGxvbjIpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmFkbGF0MSA9IChNYXRoLlBJICogbGF0MSkgLyAxODA7XG4gICAgICB2YXIgcmFkbGF0MiA9IChNYXRoLlBJICogbGF0MikgLyAxODA7XG4gICAgICB2YXIgdGhldGEgPSBsb24xIC0gbG9uMjtcbiAgICAgIHZhciByYWR0aGV0YSA9IChNYXRoLlBJICogdGhldGEpIC8gMTgwO1xuICAgICAgdmFyIGRpc3QgPVxuICAgICAgICBNYXRoLnNpbihyYWRsYXQxKSAqIE1hdGguc2luKHJhZGxhdDIpICtcbiAgICAgICAgTWF0aC5jb3MocmFkbGF0MSkgKiBNYXRoLmNvcyhyYWRsYXQyKSAqIE1hdGguY29zKHJhZHRoZXRhKTtcbiAgICAgIGlmIChkaXN0ID4gMSkge1xuICAgICAgICBkaXN0ID0gMTtcbiAgICAgIH1cbiAgICAgIGRpc3QgPSBNYXRoLmFjb3MoZGlzdCk7XG4gICAgICBkaXN0ID0gKGRpc3QgKiAxODApIC8gTWF0aC5QSTtcbiAgICAgIGRpc3QgPSBkaXN0ICogNjAgKiAxLjE1MTU7XG4gICAgICBpZiAodW5pdCA9PSBcIktcIikge1xuICAgICAgICBkaXN0ID0gZGlzdCAqIDEuNjA5MzQ0O1xuICAgICAgfVxuICAgICAgaWYgKHVuaXQgPT0gXCJOXCIpIHtcbiAgICAgICAgZGlzdCA9IGRpc3QgKiAwLjg2ODQ7XG4gICAgICB9XG4gICAgICBpZiAodW5pdCA9PSBcIk1UXCIpIHtcbiAgICAgICAgZGlzdCA9IGRpc3QgKiAxLjYwOTM0NCAqIDEwMDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGlzdDtcbiAgICB9XG4gIH0sXG4gIHNob3czQWRkcmVzc1dvcmRzOiAoYWRkcmVzcykgPT4ge1xuICAgIGxldCByZXRBZGQgPSBbXTtcbiAgICBpZiAoYWRkcmVzcykge1xuICAgICAgbGV0IGFkZEFyciA9IGFkZHJlc3Muc3BsaXQoXCIsXCIpO1xuICAgICAgbGV0IGkgPSAwO1xuICAgICAgZm9yIChsZXQgYSBvZiBhZGRBcnIpIHtcbiAgICAgICAgaWYgKGEgJiYgaSA8IDMpIHJldEFkZC5wdXNoKGEpO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXRBZGQuam9pbihcIixcIik7XG4gIH0sXG5cbiAgbWFrZVNlcnZpY2VEZXRhaWxzQXBpOiAoc2VydmljZURldGFpbHMpID0+IHtcbiAgICB0cnkge1xuICAgICAgbGV0IGZsb29yID0gc2VydmljZURldGFpbHMuYnVzX2xheW91dC5mbG9vcjtcbiAgICAgIGxldCBmbG9vckFyciA9IFtdO1xuICAgICAgbGV0IGxvd2VyRmxvb3IgPSBbXTtcbiAgICAgIGxldCB1cHBlckZsb29yID0gW107XG4gICAgICBsZXQgc2VhdF9kZXRhaWxzID0gW107XG5cbiAgICAgIGxldCBhdmFpbGFibGUgPSBbXTtcbiAgICAgIGxldCBhdmFpbGFibGVGbG9vciA9IFtdO1xuICAgICAgbGV0IGF2YWlsYWJsZUFycjtcbiAgICAgIGxldCBhdmFpbGFibGVBcnJGbG9vciA9IFtdO1xuICAgICAgbGV0IGF2YWlsYWJsZVNlYXRzID0gMDtcbiAgICAgIGF2YWlsYWJsZUFyckZsb29yID1cbiAgICAgICAgc2VydmljZURldGFpbHMuYnVzX2xheW91dC5hdmFpbGFibGUgJiZcbiAgICAgICAgc2VydmljZURldGFpbHMuYnVzX2xheW91dC5hdmFpbGFibGUuc3BsaXQoXCI6XCIpO1xuICAgICAgbGV0IGogPSAwO1xuICAgICAgZm9yIChsZXQgZmxvb3Igb2YgYXZhaWxhYmxlQXJyRmxvb3IpIHtcbiAgICAgICAgbGV0IGF2YWlsYWJsZUFyciA9IGZsb29yLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgYXZhaWxhYmxlRmxvb3Jbal0gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdmFpbGFibGVBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgY2VsbCA9IGF2YWlsYWJsZUFycltpXS5zcGxpdChcInxcIik7XG4gICAgICAgICAgYXZhaWxhYmxlRmxvb3Jbal0ucHVzaCh7XG4gICAgICAgICAgICBzZWF0TnVtYmVyOiBjZWxsWzBdLFxuICAgICAgICAgICAgc2VhdEZhcmU6IGNlbGxbMV0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGNlbGwgJiYgY2VsbFswXSkge1xuICAgICAgICAgICAgYXZhaWxhYmxlU2VhdHMrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgICAgLy8gfVxuICAgICAgbGV0IGNvYWNoX2RldGFpbHMgPSBbXTtcbiAgICAgIGxldCBpbmRleE9mQ29sb24gPSBzZXJ2aWNlRGV0YWlscy5idXNfbGF5b3V0LmNvYWNoX2RldGFpbHMuaW5kZXhPZihcIjpcIik7XG4gICAgICBsZXQgY29hY2hGbG9vcnMgPSBzZXJ2aWNlRGV0YWlscy5idXNfbGF5b3V0LmNvYWNoX2RldGFpbHMuc3BsaXQoXCI6XCIpO1xuICAgICAgbGV0IGZsb29yTm8gPSAwO1xuICAgICAgZm9yIChsZXQgZmxvb3Igb2YgY29hY2hGbG9vcnMpIHtcbiAgICAgICAgbGV0IHJvd0FyciA9IGZsb29yLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3dBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgY29sQXJyID0gcm93QXJyW2ldLnNwbGl0KFwiLVwiKTtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbEFyci5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgbGV0IGNlbGwgPSBjb2xBcnJbal0uc3BsaXQoXCJ8XCIpO1xuICAgICAgICAgICAgY29hY2hfZGV0YWlscy5wdXNoKHtcbiAgICAgICAgICAgICAgc2VhdE51bWJlcjogY2VsbFswXSxcbiAgICAgICAgICAgICAgc2VhdFR5cGU6IGNlbGxbMV0gPyBjZWxsWzFdIDogXCJcIixcbiAgICAgICAgICAgICAgcm93SWQ6IGksXG4gICAgICAgICAgICAgIGNvbElkOiBqLFxuICAgICAgICAgICAgICBmbG9vck5vOiBmbG9vck5vLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZsb29yTm8rKztcbiAgICAgIH1cbiAgICAgIGxldCBmbG9vcnMgPSBbXTtcbiAgICAgIGlmIChmbG9vcikge1xuICAgICAgICBpZiAoZmxvb3IuaW5kZXhPZihcIkBcIikgPj0gMCkge1xuICAgICAgICAgIGZsb29yQXJyID0gZmxvb3Iuc3BsaXQoXCJAXCIpO1xuICAgICAgICAgIGxvd2VyRmxvb3IgPSBmbG9vckFyclswXSA/IGZsb29yQXJyWzBdLnNwbGl0KFwiLFwiKSA6IFtdO1xuICAgICAgICAgIGlmIChmbG9vckFyclsxXSAmJiBmbG9vckFyclsxXS5pbmRleE9mKFwiLFwiKSA+IC0xKSB7XG4gICAgICAgICAgICB1cHBlckZsb29yID0gZmxvb3JBcnJbMV0uc3BsaXQoXCIsXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgZm9yIChsZXQgYXJyIG9mIGZsb29yQXJyKSB7XG4gICAgICAgICAgICBsZXQgc2VhdFJldmVyc2UgPSBhcnIgPyBhcnIuc3BsaXQoXCI6XCIpIDogW107XG4gICAgICAgICAgICBmbG9vcnNbaV0gPSB7fTtcbiAgICAgICAgICAgIGlmIChzZWF0UmV2ZXJzZVswXSAmJiBzZWF0UmV2ZXJzZVswXS5pbmRleE9mKFwiLFwiKSA+IC0xKSB7XG4gICAgICAgICAgICAgIGZsb29yc1tpXS5ub3JtYWwgPSBzZWF0UmV2ZXJzZVswXS5zcGxpdChcIixcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VhdFJldmVyc2VbMV0gJiYgc2VhdFJldmVyc2VbMV0uaW5kZXhPZihcIixcIikgPiAtMSkge1xuICAgICAgICAgICAgICBmbG9vcnNbaV0ucmV2ZXJzZSA9IHNlYXRSZXZlcnNlWzFdLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG93ZXJGbG9vciA9IGZsb29yLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IHNlYXRBdmFpbGFibGU7XG4gICAgICBsZXQgbm9BdmFpbGFibGVDb2xvbiA9XG4gICAgICAgIHNlcnZpY2VEZXRhaWxzLmJ1c19sYXlvdXQuYXZhaWxhYmxlLmluZGV4T2YoXCI6XCIpIDwgMDtcbiAgICAgIGxldCBhdmFpbGFibGVBcnJOb0NvbCA9IHNlcnZpY2VEZXRhaWxzLmJ1c19sYXlvdXQuYXZhaWxhYmxlLnNwbGl0KFwiLFwiKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29hY2hfZGV0YWlscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgc2VhdEpzb24gPSB7fTtcbiAgICAgICAgbGV0IGlzU2VhdCA9IGZhbHNlO1xuICAgICAgICBsZXQgc2VhdFR5cGUgPSBnZXRTZWF0VHlwZShjb2FjaF9kZXRhaWxzW2ldLnNlYXRUeXBlLCBzZWF0SWRlbnRpZmllcnMpO1xuICAgICAgICBsZXQgaXNHYW5nd2F5ID1cbiAgICAgICAgICBjb2FjaF9kZXRhaWxzW2ldLnNlYXRUeXBlLmluZGV4T2YoXCJHWVwiKSA+PSAwIHx8ICFzZWF0VHlwZVxuICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICA6IGZhbHNlO1xuICAgICAgICBsZXQgYmVydGhMb3dlcjtcbiAgICAgICAgbGV0IGJlcnRoVXBwZXI7XG4gICAgICAgIGxldCBiZXJ0aFR5cGU7XG4gICAgICAgIGxldCBzZWF0RGlyZWN0aW9uO1xuICAgICAgICBsZXQgZmxvb3JubyA9IDA7XG4gICAgICAgIGZvciAobGV0IGZsb29yIG9mIGZsb29ycykge1xuICAgICAgICAgIGlmIChmbG9vcm5vID09PSBjb2FjaF9kZXRhaWxzW2ldLmZsb29yTm8pIHtcbiAgICAgICAgICAgIGxldCBpc1NlYXRJbkZsb29yTm9yYW1sID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBpc1NlYXRJbkZsb29yUmV2ID0gbnVsbDtcbiAgICAgICAgICAgIHNlYXREaXJlY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgaXNTZWF0SW5GbG9vck5vcmFtbCA9XG4gICAgICAgICAgICAgIGZsb29yLm5vcm1hbCAmJlxuICAgICAgICAgICAgICBmbG9vci5ub3JtYWwuZmluZCgobnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PSBjb2FjaF9kZXRhaWxzW2ldLnNlYXROdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZmxvb3IucmV2ZXJzZSkge1xuICAgICAgICAgICAgICBpc1NlYXRJbkZsb29yUmV2ID0gZmxvb3IucmV2ZXJzZS5maW5kKChudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09IGNvYWNoX2RldGFpbHNbaV0uc2VhdE51bWJlcikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1NlYXRJbkZsb29yTm9yYW1sKSB7XG4gICAgICAgICAgICAgIGJlcnRoVHlwZSA9IGZsb29ybm87XG4gICAgICAgICAgICAgIHNlYXREaXJlY3Rpb24gPSAxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1NlYXRJbkZsb29yUmV2KSB7XG4gICAgICAgICAgICAgIGJlcnRoVHlwZSA9IGZsb29ybm87XG4gICAgICAgICAgICAgIHNlYXREaXJlY3Rpb24gPSAyO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZmxvb3JubysrO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzZWF0QXZhaWxhYmxlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIShDb21tb25TZXJ2aWNlLmlzVHJhaW4oKSB8fCBzZXJ2aWNlRGV0YWlscy50cmF2ZWxfaWQgPT0gMjcyKSAmJlxuICAgICAgICAgIG5vQXZhaWxhYmxlQ29sb25cbiAgICAgICAgKSB7XG4gICAgICAgICAgbGV0IGF2YWlsYWJsZUl0ZW0gPSBhdmFpbGFibGVBcnJOb0NvbC5maW5kKChzZWF0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc2VhdC5zcGxpdChcInxcIilbMF0gPT0gY29hY2hfZGV0YWlsc1tpXS5zZWF0TnVtYmVyO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChhdmFpbGFibGVJdGVtKSB7XG4gICAgICAgICAgICBzZWF0QXZhaWxhYmxlID0ge1xuICAgICAgICAgICAgICBzZWF0TnVtYmVyOiBhdmFpbGFibGVJdGVtLnNwbGl0KFwifFwiKVswXSxcbiAgICAgICAgICAgICAgc2VhdEZhcmU6IGF2YWlsYWJsZUl0ZW0uc3BsaXQoXCJ8XCIpWzFdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGF2YWlsYWJsZUZsb29yW2NvYWNoX2RldGFpbHNbaV0uZmxvb3JOb10pIHtcbiAgICAgICAgICAgIHNlYXRBdmFpbGFibGUgPSBhdmFpbGFibGVGbG9vcltjb2FjaF9kZXRhaWxzW2ldLmZsb29yTm9dLmZpbmQoXG4gICAgICAgICAgICAgIChzZWF0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlYXQuc2VhdE51bWJlciA9PSBjb2FjaF9kZXRhaWxzW2ldLnNlYXROdW1iZXI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleE9mQ29sb24gPCAwKSB7XG4gICAgICAgICAgYmVydGhMb3dlciA9IGxvd2VyRmxvb3IuZmluZCgobnVtYmVyKSA9PiB7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09IGNvYWNoX2RldGFpbHNbaV0uc2VhdE51bWJlcikge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAodXBwZXJGbG9vcikge1xuICAgICAgICAgICAgYmVydGhVcHBlciA9IHVwcGVyRmxvb3IuZmluZCgobnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChudW1iZXIgPT0gY29hY2hfZGV0YWlsc1tpXS5zZWF0TnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgZmFyZSA9IHNlYXRBdmFpbGFibGUgPyBzZWF0QXZhaWxhYmxlLnNlYXRGYXJlIDogbnVsbDtcbiAgICAgICAgc2VhdEpzb25bXCJhdmFpbGFibGVcIl0gPSBzZWF0QXZhaWxhYmxlID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICBzZWF0SnNvbltcImZhcmVcIl0gPSBmYXJlO1xuICAgICAgICBzZWF0SnNvbltcImlzX2xhZGllc19zZWF0XCJdID0gZmFsc2U7XG4gICAgICAgIHNlYXRKc29uW1wiaXNfZ2VudHNfc2VhdFwiXSA9IGZhbHNlO1xuICAgICAgICBzZWF0SnNvbltcInR5cGVcIl0gPSBzZWF0VHlwZSA/IHNlYXRUeXBlIDogXCJTQUxPTiBDQU1BXCI7XG4gICAgICAgIHNlYXRKc29uW1wic2VhdF9kaXJlY3Rpb25cIl0gPSBzZWF0RGlyZWN0aW9uO1xuICAgICAgICBzZWF0SnNvbltcImZsb29yX25vXCJdID1cbiAgICAgICAgICBpbmRleE9mQ29sb24gPj0gMFxuICAgICAgICAgICAgPyBjb2FjaF9kZXRhaWxzW2ldLmZsb29yTm9cbiAgICAgICAgICAgIDogYmVydGhMb3dlclxuICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICA6IGJlcnRoVXBwZXJcbiAgICAgICAgICAgID8gMVxuICAgICAgICAgICAgOiBmbG9vclxuICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICA6IDA7XG4gICAgICAgIHNlYXRKc29uW1wiYmVydGhUeXBlXCJdID0gYmVydGhUeXBlO1xuICAgICAgICBzZWF0SnNvbltcIm51bWJlclwiXSA9IGNvYWNoX2RldGFpbHNbaV0uc2VhdE51bWJlcjtcbiAgICAgICAgc2VhdEpzb25bXCJyb3dfaWRcIl0gPSBjb2FjaF9kZXRhaWxzW2ldLnJvd0lkO1xuICAgICAgICBzZWF0SnNvbltcImNvbF9pZFwiXSA9IGNvYWNoX2RldGFpbHNbaV0uY29sSWQ7XG4gICAgICAgIHNlYXRKc29uW1wiaXNfc2VhdFwiXSA9IHRydWU7XG4gICAgICAgIHNlYXRKc29uW1wiaXNfZ2FuZ3dheVwiXSA9IGlzR2FuZ3dheTtcbiAgICAgICAgc2VhdEpzb25bXCJpc19ob3Jpem9udGFsXCJdID0gZmFsc2U7XG4gICAgICAgIGlmICghaXNHYW5nd2F5KSB7XG4gICAgICAgICAgc2VhdEpzb25bXCJkaXNjb3VudF9hbW91bnRcIl0gPSAwO1xuICAgICAgICAgIHNlYXRKc29uW1wibmV0X2Ftb3VudFwiXSA9IGZhcmUgLSBzZWF0SnNvbltcImRpc2NvdW50X2Ftb3VudFwiXTtcbiAgICAgICAgfVxuICAgICAgICBzZWF0X2RldGFpbHMucHVzaChzZWF0SnNvbik7XG4gICAgICB9XG5cbiAgICAgIGxldCBzdGFnZXMgPSBbXTtcbiAgICAgIGxldCBjb2FjaERldGFpbHMgPSB7XG4gICAgICAgIHRvdGFsX3NlYXRzOiBjb2FjaF9kZXRhaWxzLmxlbmd0aCxcbiAgICAgICAgYXZhaWxhYmxlX3NlYXRzOiBhdmFpbGFibGUubGVuZ3RoLFxuICAgICAgICBkcml2ZXJfcG9zaXRpb246IFwibGVmdFwiLFxuICAgICAgICBzZWF0X2RldGFpbHM6IHNlYXRfZGV0YWlscyxcbiAgICAgIH07XG4gICAgICBsZXQgb2JqID0ge1xuICAgICAgICBvcmlnaW46IHsgaWQ6ICtzZXJ2aWNlRGV0YWlscy5vcmlnaW5faWQgfSxcbiAgICAgICAgZGVzdGluYXRpb246IHsgaWQ6ICtzZXJ2aWNlRGV0YWlscy5kZXN0aW5hdGlvbl9pZCB9LFxuICAgICAgICBhdmFpbGFibGVfc2VhdHM6IHNlcnZpY2VEZXRhaWxzLmF2YWlsYWJsZV9zZWF0cyxcbiAgICAgICAgdG90YWxfYXZhaWxhYmxlX3NlYXRzOiBhdmFpbGFibGVTZWF0cyxcbiAgICAgICAgZGVwX3RpbWU6IHNlcnZpY2VEZXRhaWxzLmRlcF90aW1lLFxuICAgICAgICBhcnJfdGltZTogc2VydmljZURldGFpbHMuYXJyX3RpbWUsXG4gICAgICAgIGR1cmF0aW9uOiBzZXJ2aWNlRGV0YWlscy5kdXJhdGlvbixcbiAgICAgICAgYnVzX3R5cGU6IHNlcnZpY2VEZXRhaWxzLmJ1c190eXBlLFxuICAgICAgICBub19vZl93YWdvbnM6IGZsb29ycy5sZW5ndGgsXG4gICAgICAgIGNvc3Q6IHNlcnZpY2VEZXRhaWxzLmNvc3QsXG4gICAgICAgIGNvYWNoX2RldGFpbHM6IGNvYWNoRGV0YWlscyxcbiAgICAgICAgc3RhZ2VfZGV0YWlsczogc3RhZ2VzLFxuICAgICAgICBib2FyZGluZ19zdGFnZXM6IHNlcnZpY2VEZXRhaWxzLmJ1c19sYXlvdXQuYm9hcmRpbmdfc3RhZ2VzLFxuICAgICAgICBkcm9wb2ZmX3N0YWdlczogc2VydmljZURldGFpbHMuYnVzX2xheW91dC5kcm9wb2ZmX3N0YWdlcyxcbiAgICAgICAgdHJhdmVsX2lkOiBzZXJ2aWNlRGV0YWlscy50cmF2ZWxfaWQsXG4gICAgICAgIHJlc19kZXRhaWxzOiBzZXJ2aWNlRGV0YWlscy5yZXNfZGV0YWlscyxcbiAgICAgICAgaWQ6IHNlcnZpY2VEZXRhaWxzLmlkLFxuICAgICAgfTtcbiAgICAgIGxldCByZXRPYmogPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xuICAgICAgb2JqID0gbnVsbDtcblxuICAgICAgLy8gY29uc29sZS5sb2coJ3NlYXRfZGV0YWlscycsIHNlYXRfZGV0YWlscywgb2JqKTtcbiAgICAgIHJldHVybiByZXRPYmo7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gY29uc29sZS5sb2coXCJjb2FjaGxheW90XCIsIGUpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9LFxuICBzZXRTZWF0TGF5b3V0OiAoc2VydmljZURldGFpbHMsIHJvdXRlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBjb2FjaExheW91dEpzb24gPSBbXTtcbiAgICAgIGxldCB1cHBlckF2YWxpYmlsaXR5O1xuICAgICAgbGV0IG9yaWdpblN0YWdlRGV0YWlscztcbiAgICAgIGxldCBkZXN0aW5hdGlvblN0YWdlRGV0YWlscztcblxuICAgICAgbGV0IGVycm9yTWVzc2FnZTtcbiAgICAgIGlmIChzZXJ2aWNlRGV0YWlscy5jb2RlID09PSA0MTYpIHtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gc2VydmljZURldGFpbHMubWVzc2FnZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBzZWF0RGV0YWlscyA9IHNlcnZpY2VEZXRhaWxzLmNvYWNoX2RldGFpbHMuc2VhdF9kZXRhaWxzO1xuICAgICAgICBmb3IgKGxldCBzZWF0IG9mIHNlYXREZXRhaWxzKSB7XG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJTRUFUIElTIFNFQVQgSVMgU0VBVCBJUy0tLS0tLS0tLVwiLCBzZWF0KTtcbiAgICAgICAgICBpZiAoIShDb21tb25TZXJ2aWNlLmlzVHJhaW4oKSB8fCBzZXJ2aWNlRGV0YWlscy50cmF2ZWxfaWQgPT0gMjcyKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2FjaExheW91dEpzb25bc2VhdC5yb3dfaWRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgIGNvYWNoTGF5b3V0SnNvbltzZWF0LnJvd19pZF0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2FjaExheW91dEpzb25bc2VhdC5mbG9vcl9ub10gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgY29hY2hMYXlvdXRKc29uW3NlYXQuZmxvb3Jfbm9dID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHR5cGVvZiBjb2FjaExheW91dEpzb25bc2VhdC5mbG9vcl9ub11bc2VhdC5yb3dfaWRdID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29hY2hMYXlvdXRKc29uW3NlYXQuZmxvb3Jfbm9dW3NlYXQucm93X2lkXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgY3VycmVudFNlYXRKc29uID0ge307XG5cbiAgICAgICAgICBsZXQgYmVydGhUZXh0UG9zID0gc2VhdC50eXBlLmluZGV4T2YoXCJCZXJ0aFwiKTtcbiAgICAgICAgICBjdXJyZW50U2VhdEpzb24ucm93U3BhbiA9IGJlcnRoVGV4dFBvcyAhPT0gLTEgPyAyIDogMTtcbiAgICAgICAgICBjdXJyZW50U2VhdEpzb24uaXNCZXJ0aCA9IGJlcnRoVGV4dFBvcyAhPT0gLTEgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgY3VycmVudFNlYXRKc29uLmlzUmVzZXJ2YWJsZSA9IHNlYXQuYXZhaWxhYmxlO1xuICAgICAgICAgIGN1cnJlbnRTZWF0SnNvbi5iZXJ0aFR5cGUgPSBzZWF0LmJlcnRoVHlwZTtcbiAgICAgICAgICBjdXJyZW50U2VhdEpzb24uaXNVcHBlciA9IHNlYXQuZmxvb3Jfbm8gPyBzZWF0LmZsb29yX25vID09PSAxIDogZmFsc2U7XG4gICAgICAgICAgaWYgKGN1cnJlbnRTZWF0SnNvbi5pc1VwcGVyKSB7XG4gICAgICAgICAgICB1cHBlckF2YWxpYmlsaXR5ID0gY3VycmVudFNlYXRKc29uLmlzVXBwZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRTZWF0SnNvbi5pc0xvd2VyID0gIWN1cnJlbnRTZWF0SnNvbi5pc1VwcGVyO1xuICAgICAgICAgIGN1cnJlbnRTZWF0SnNvbi5vYmplY3QgPSBzZWF0O1xuICAgICAgICAgIGN1cnJlbnRTZWF0SnNvbi5udW1iZXIgPSBzZWF0Lm51bWJlcjtcbiAgICAgICAgICBjdXJyZW50U2VhdEpzb24uaXNMYWRpZXNTZWF0ID0gc2VhdC5pc19sYWRpZXNfc2VhdDtcbiAgICAgICAgICBjdXJyZW50U2VhdEpzb24uaXNHZW50c1NlYXQgPSBzZWF0LmlzX2dlbnRzX3NlYXQ7XG4gICAgICAgICAgY3VycmVudFNlYXRKc29uLnR5cGUgPSBzZWF0LnR5cGU7XG4gICAgICAgICAgY3VycmVudFNlYXRKc29uLmlzR2FuZ1dheSA9IHNlYXQudHlwZS5pbmRleE9mKFwiR2FuZ1wiKSAhPT0gLTE7XG4gICAgICAgICAgY3VycmVudFNlYXRKc29uLmlzQnJlYWsgPSBzZWF0LnR5cGUuaW5kZXhPZihcIkJyZWFrXCIpICE9PSAtMTtcbiAgICAgICAgICBjdXJyZW50U2VhdEpzb24uaXNTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgIGlmICghKENvbW1vblNlcnZpY2UuaXNUcmFpbigpIHx8IHNlcnZpY2VEZXRhaWxzLnRyYXZlbF9pZCA9PSAyNzIpKSB7XG4gICAgICAgICAgICBjb2FjaExheW91dEpzb25bc2VhdC5yb3dfaWRdW3NlYXQuY29sX2lkXSA9IGN1cnJlbnRTZWF0SnNvbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29hY2hMYXlvdXRKc29uW3NlYXQuZmxvb3Jfbm9dW3NlYXQucm93X2lkXVtzZWF0LmNvbF9pZF0gPVxuICAgICAgICAgICAgICBjdXJyZW50U2VhdEpzb247XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG9yaWdpblN0YWdlRGV0YWlscyA9IHNlcnZpY2VEZXRhaWxzLmJvYXJkaW5nX3N0YWdlcztcbiAgICAgICAgZGVzdGluYXRpb25TdGFnZURldGFpbHMgPSBzZXJ2aWNlRGV0YWlscy5kcm9wb2ZmX3N0YWdlcztcbiAgICAgICAgbGV0IGJvYXJkaW5nU3RhZ2UgPVxuICAgICAgICAgIG9yaWdpblN0YWdlRGV0YWlscy5sZW5ndGggPT0gMSA/IG9yaWdpblN0YWdlRGV0YWlsc1swXSA6IG51bGw7XG4gICAgICAgIGxldCBkcm9wcGluZ1N0YWdlID1cbiAgICAgICAgICBkZXN0aW5hdGlvblN0YWdlRGV0YWlscy5sZW5ndGggPT0gMVxuICAgICAgICAgICAgPyBkZXN0aW5hdGlvblN0YWdlRGV0YWlsc1swXVxuICAgICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29hY2hMYXlvdXRKc29uOiBjb2FjaExheW91dEpzb24sXG4gICAgICAgICAgb3JpZ2luU3RhZ2VEZXRhaWxzOiBvcmlnaW5TdGFnZURldGFpbHMsXG4gICAgICAgICAgZGVzdGluYXRpb25TdGFnZURldGFpbHM6IGRlc3RpbmF0aW9uU3RhZ2VEZXRhaWxzLFxuICAgICAgICAgIGJvYXJkaW5nU3RhZ2U6IGJvYXJkaW5nU3RhZ2UsXG4gICAgICAgICAgZHJvcHBpbmdTdGFnZTogZHJvcHBpbmdTdGFnZSxcbiAgICAgICAgICB1cHBlckF2YWxpYmlsaXR5OiB1cHBlckF2YWxpYmlsaXR5LFxuICAgICAgICAgIHJvdXRlOiByb3V0ZSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgXCJFeGNlcHRpb24gaW4gc2VhdC1sYW91dC50cyAtLT4gZGVmYXVsdENhbGwoKSAtLT4gYXBpRmFjdG9yeS5nZXRTZXJ2aWNlRGV0YWlscyhwYXRoKVwiLFxuICAgICAgICBlXG4gICAgICApO1xuICAgIH1cbiAgfSxcbiAgdHJhbnNwb3NlOiAobWF0cml4KSA9PiB7XG4gICAgcmV0dXJuIG1hdHJpeC5yZWR1Y2UoXG4gICAgICAocHJldiwgbmV4dCkgPT4gbmV4dC5tYXAoKGl0ZW0sIGkpID0+IChwcmV2W2ldIHx8IFtdKS5jb25jYXQobmV4dFtpXSkpLFxuICAgICAgW11cbiAgICApO1xuICB9LFxuICBzZWxlY3RTZWF0OiAoXG4gICAgc2VhdCxcbiAgICBtZXRhRGF0YSxcbiAgICBjb2FjaExheW91dCxcbiAgICBzZWxlY3RlZFNlYXRzVG9Cb29rLFxuICAgIHNlbGVjdGVkU2VydmljZVxuICApID0+IHtcblxuICAgIGlmICghc2VhdC5vYmplY3QuYXZhaWxhYmxlKSB7XG4gICAgICByZXR1cm4gXCJOT19BVkFJTEFCTEVcIjtcbiAgICB9XG4gICAgdHJ5IHtcblxuICAgICAgbGV0IGJvb2tpbmdEZXRhaWxzID0ge307XG4gICAgICBsZXQgY3VycmVudFNlYXQgPSBzZWF0O1xuICAgICAgbGV0IHNlbGVjdGVkU2VhdHNOdW1iZXJzID0gXCJcIjtcbiAgICAgIHNlbGVjdGVkU2VhdHNUb0Jvb2sgPSBDb21tb25TZXJ2aWNlLmNvcHlPYmplY3QoXG4gICAgICAgIHNlbGVjdGVkU2VhdHNUb0Jvb2sgPyBzZWxlY3RlZFNlYXRzVG9Cb29rIDogW11cbiAgICAgICk7XG4gICAgICBsZXQgY29hY2hMYXlvdXRMb2NhbCA9IENvbW1vblNlcnZpY2UuY29weU9iamVjdChjb2FjaExheW91dCk7XG4gICAgICBsZXQgY3VycmVudFNlYXRKc29uID1cbiAgICAgICAgY29hY2hMYXlvdXRMb2NhbFtjdXJyZW50U2VhdFtcIm9iamVjdFwiXS5yb3dfaWRdW1xuICAgICAgICAgIGN1cnJlbnRTZWF0W1wib2JqZWN0XCJdLmNvbF9pZFxuICAgICAgICBdO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHNlbGVjdGVkU2VhdHNUb0Jvb2subGVuZ3RoIDxcbiAgICAgICAgICAobWV0YURhdGEgJiZcbiAgICAgICAgICBtZXRhRGF0YS5tYXhfc2VhdHNfYWxsb3dlZF9ieV9vcFtzZWxlY3RlZFNlcnZpY2UudHJhdmVsX2lkXVxuICAgICAgICAgICAgPyBtZXRhRGF0YS5tYXhfc2VhdHNfYWxsb3dlZF9ieV9vcFtzZWxlY3RlZFNlcnZpY2UudHJhdmVsX2lkXVxuICAgICAgICAgICAgOiBtZXRhRGF0YS5tYXhfc2VhdHNfYWxsb3dlZCkgfHxcbiAgICAgICAgY3VycmVudFNlYXRKc29uLmlzU2VsZWN0ZWRcbiAgICAgICkge1xuICAgICAgICBjdXJyZW50U2VhdEpzb24uaXNTZWxlY3RlZCA9ICFjdXJyZW50U2VhdEpzb24uaXNTZWxlY3RlZDtcbiAgICAgICAgaWYgKGN1cnJlbnRTZWF0SnNvbi5pc1NlbGVjdGVkKSB7XG4gICAgICAgICAgc2VsZWN0ZWRTZWF0c1RvQm9vay5wdXNoKHNlYXQub2JqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxlY3RlZFNlYXRzVG9Cb29rLnNwbGljZShcbiAgICAgICAgICAgIHNlbGVjdGVkU2VhdHNUb0Jvb2suZmluZEluZGV4KChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChpdGVtLm51bWJlciA9PT0gc2VhdC5vYmplY3QubnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5wYXNzZW5nZXJOYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICBpdGVtLmFnZSA9IFwiXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubnVtYmVyID09PSBzZWF0Lm9iamVjdC5udW1iZXI7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0b3RhbEJvb2tpbmdBbW91bnQgPSAwO1xuICAgICAgICBsZXQgc2VsZWN0ZWRTZWF0cyA9IFtdO1xuICAgICAgICBsZXQgc2VsZWN0ZWRTZWF0VHlwZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3RlZFNlYXRzVG9Cb29rLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdG90YWxCb29raW5nQW1vdW50ICs9ICtzZWxlY3RlZFNlYXRzVG9Cb29rW2ldLmZhcmU7XG4gICAgICAgICAgc2VsZWN0ZWRTZWF0cy5wdXNoKFxuICAgICAgICAgICAgc2VsZWN0ZWRTZWF0c1RvQm9va1tpXS5mbG9vcl9ubyArXG4gICAgICAgICAgICAgIDEgK1xuICAgICAgICAgICAgICBcIl9cIiArXG4gICAgICAgICAgICAgIHNlbGVjdGVkU2VhdHNUb0Jvb2tbaV0ubnVtYmVyXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoIXNlbGVjdGVkU2VhdFR5cGVzW3NlbGVjdGVkU2VhdHNUb0Jvb2tbaV0udHlwZV0pIHtcbiAgICAgICAgICAgIHNlbGVjdGVkU2VhdFR5cGVzW3NlbGVjdGVkU2VhdHNUb0Jvb2tbaV0udHlwZV0gPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZWN0ZWRTZWF0VHlwZXNbc2VsZWN0ZWRTZWF0c1RvQm9va1tpXS50eXBlXS5wdXNoKFxuICAgICAgICAgICAgQ29tbW9uU2VydmljZS5jb3B5T2JqZWN0KHNlbGVjdGVkU2VhdHNUb0Jvb2tbaV0pXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gc2VsZWN0ZWRTZWF0VHlwZXMpIHtcbiAgICAgICAgICBsZXQgc2VhdE51bWJlcnMgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCB0eXBlIG9mIHNlbGVjdGVkU2VhdFR5cGVzW2tleV0pIHtcbiAgICAgICAgICAgIHNlYXROdW1iZXJzLnB1c2godHlwZS5udW1iZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxlY3RlZFNlYXRUeXBlc1trZXldWzBdW1wic2VhdE51bWJlcnNcIl0gPSBzZWF0TnVtYmVycy5qb2luKFwiLFwiKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxlY3RlZFNlYXRzTnVtYmVycyA9IHNlbGVjdGVkU2VhdHMuam9pbihcIixcIik7XG4gICAgICAgIC8vIGRpc2NvdW50QW1vdW50ID0gdGhpcy5jb21tb25TZXJ2aWNlLmNhbGN1bGF0ZUFtb3VudEJ5UGVyY2VudGFnZSh0b3RhbEJvb2tpbmdBbW91bnQsbWV0YURhdGEuZGlzY291bnRQZXJjZW50YWdlKTtcblxuICAgICAgICBsZXQgZGlzY291bnRBbW91bnQgPSAwO1xuICAgICAgICBsZXQgbmV0Qm9va2luZ0Ftb3VudCA9IHRvdGFsQm9va2luZ0Ftb3VudCAtIGRpc2NvdW50QW1vdW50O1xuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tIEZhcmUgY2hhcmdlcyBkZXRhaWxzIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGJvb2tpbmdEZXRhaWxzLnRvdGFsQm9va2luZ0Ftb3VudCA9IHRvdGFsQm9va2luZ0Ftb3VudDtcbiAgICAgICAgYm9va2luZ0RldGFpbHMubmV0Qm9va2luZ0Ftb3VudCA9IG5ldEJvb2tpbmdBbW91bnQ7XG4gICAgICAgIGJvb2tpbmdEZXRhaWxzLmRpc2NvdW50QW1vdW50ID0gZGlzY291bnRBbW91bnQ7XG4gICAgICAgIGJvb2tpbmdEZXRhaWxzLnNlbGVjdGVkU2VhdHNUb0Jvb2sgPSBzZWxlY3RlZFNlYXRzVG9Cb29rO1xuICAgICAgICBib29raW5nRGV0YWlscy5zZWxlY3RlZFNlYXRzTnVtYmVycyA9IHNlbGVjdGVkU2VhdHNOdW1iZXJzO1xuICAgICAgICBib29raW5nRGV0YWlscy5zZWxlY3RlZFNlYXRUeXBlcyA9IHNlbGVjdGVkU2VhdFR5cGVzO1xuICAgICAgICBib29raW5nRGV0YWlscy5jb2FjaExheW91dCA9IGNvYWNoTGF5b3V0TG9jYWw7XG4gICAgICAgIHJldHVybiBib29raW5nRGV0YWlscztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIk1BWF9TRUFUU19FUlJPUlwiO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiU2VsZWN0c2VhdHNDb250cm9sbGVyX3NlbGVjdFNlYXRGdW5jdGlvblwiLCBlKTtcbiAgICB9XG4gIH0sXG5cbiAgc2V0TG9jYWw6IChrZXksIHZhbCkgPT4ge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkodmFsKSk7XG4gIH0sXG5cbiAgZ2V0TG9jYWw6IChrZXkpID0+IHtcbiAgICBsZXQgdmFsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICBpZiAodmFsKSByZXR1cm4gSlNPTi5wYXJzZSh2YWwpO1xuICB9LFxuICByZW1vdmVMb2NhbDogKGtleSkgPT4ge1xuICAgIGxldCB2YWwgPSBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICB9LFxuICBnZXRTZXJ2aWNlRmlsdGVyczogKHJvdXRlcywgbWV0YURhdGEpID0+IHtcbiAgICBsZXQgZmlsdGVycyA9IHtcbiAgICAgIG9wZXJhdG9yczoge1xuICAgICAgICB0aXRsZTogXCJCVVNfQ09NQVBOSUVTXCIsXG4gICAgICAgIHR5cGU6IFwib3BlcmF0b3JcIixcbiAgICAgICAgb3B0aW9uczogW10sXG4gICAgICB9LFxuICAgICAgc2VhdFR5cGVzOiB7XG4gICAgICAgIHRpdGxlOiBcIlNFQVRfVFlQRVNcIixcbiAgICAgICAgdHlwZTogXCJzZWF0X3R5cGVzXCIsXG4gICAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgfSxcbiAgICAgIGFtZW5pdGllczoge1xuICAgICAgICB0aXRsZTogXCJBTUVOSVRJRVNcIixcbiAgICAgICAgdHlwZTogXCJhbWVuaXRpZXNcIixcbiAgICAgICAgb3B0aW9uczogW10sXG4gICAgICB9LFxuICAgIH07XG4gICAgbGV0IHNlYXRUeXBlcyA9IFtdO1xuICAgIGxldCBvcGVyYXRvcnMgPSBbXTtcbiAgICBsZXQgYW1lbml0aWVzID0gW107XG4gICAgZm9yIChsZXQgciBvZiByb3V0ZXMpIHtcbiAgICAgIGxldCBmYXJlU3RyID0gci5mYXJlX3N0ci5zcGxpdChcIixcIik7XG4gICAgICBmb3IgKGxldCBmIG9mIGZhcmVTdHIpIHtcbiAgICAgICAgbGV0IHR5cGUgPSBmLnNwbGl0KFwiOlwiKVswXS5yZXBsYWNlKC8gL2csIFwiLVwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBsZXQgdHlwZTI7XG4gICAgICAgIGlmICh0eXBlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcInNlbWlcIikgPiAtMSkge1xuICAgICAgICAgIHR5cGUyID0gXCJTZW1pIENhbWFcIjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihcInZlbnRcIikgPiAtMSkge1xuICAgICAgICAgIHR5cGUyID0gXCJTYWxvbiBTaW4gVmVudFwiO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwic2Fsb25cIikgPiAtMSkge1xuICAgICAgICAgIHR5cGUyID0gXCJTYWxvbiBDYW1hXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJlamVjdXRpdm9cIikgPiAtMSkge1xuICAgICAgICAgIHR5cGUyID0gXCJDYW1hIEVqZWN1dGl2b1wiO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwic3VpdGVcIikgPiAtMSkge1xuICAgICAgICAgIHR5cGUyID0gXCJDYW1hIFN1aXRlXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJ2aXBcIikgPiAtMSkge1xuICAgICAgICAgIHR5cGUyID0gXCJDYW1hIFZJUFwiO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwicHJlZmVyZW50ZVwiKSA+IC0xKSB7XG4gICAgICAgICAgdHlwZTIgPSBcIlByZWZlcmVudGVcIjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlLnRvTG93ZXJDYXNlKCkgPT0gXCJjYW1hXCIpIHtcbiAgICAgICAgICB0eXBlMiA9IFwiQ2FtYVwiO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUudG9Mb3dlckNhc2UoKSA9PSBcImNsYXNpY29cIikge1xuICAgICAgICAgIHR5cGUyID0gXCJDbGFzaWNvXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlYXRUeXBlcy5pbmRleE9mKHR5cGUyKSA9PT0gLTEpIHtcbiAgICAgICAgICBzZWF0VHlwZXMucHVzaCh0eXBlMik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvcGVyYXRvcnMuaW5kZXhPZihyLm9wZXJhdG9yX3NlcnZpY2VfbmFtZSkgPT09IC0xKSB7XG4gICAgICAgIG9wZXJhdG9ycy5wdXNoKHIub3BlcmF0b3Jfc2VydmljZV9uYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtZXRhRGF0YSkge1xuICAgICAgICBsZXQgYW1BcnIgPSByLm9wZXJhdG9yX2RldGFpbHNbNF07XG4gICAgICAgIGZvciAobGV0IGEgb2YgYW1BcnIpIHtcbiAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgbGV0IGFtID0gbWV0YURhdGEuYW1lbml0aWVzW2FdLnNwbGl0KFwiLlwiKVswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKGFtZW5pdGllcy5pbmRleE9mKGFtKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgYW1lbml0aWVzLnB1c2goYW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBzIG9mIHNlYXRUeXBlcykge1xuICAgICAgaWYgKHMpXG4gICAgICAgIGZpbHRlcnMuc2VhdFR5cGVzLm9wdGlvbnMucHVzaCh7XG4gICAgICAgICAgbGFiZWw6IHMucmVwbGFjZSgvLS9nLCBcIiBcIiksXG4gICAgICAgICAgdmFsdWU6IHMsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKGxldCBvIG9mIG9wZXJhdG9ycy5zb3J0KCkpIHtcbiAgICAgIGZpbHRlcnMub3BlcmF0b3JzLm9wdGlvbnMucHVzaCh7IGxhYmVsOiBvLCB2YWx1ZTogbyB9KTtcbiAgICB9XG4gICAgaWYgKG1ldGFEYXRhKSB7XG4gICAgICBmb3IgKGxldCBhIG9mIGFtZW5pdGllcykge1xuICAgICAgICBpZiAoYSlcbiAgICAgICAgICBmaWx0ZXJzLmFtZW5pdGllcy5vcHRpb25zLnB1c2goe1xuICAgICAgICAgICAgbGFiZWw6IGdldEFtZW5pdHlOYW1lKGEuc3BsaXQoXCIuXCIpWzBdLnNwbGl0KFwiX1wiKS5qb2luKFwiIFwiKSksXG4gICAgICAgICAgICB2YWx1ZTogYSxcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmlsdGVycztcbiAgfSxcblxuICBnZXRBZ2VuY3lIZWFkZXJzOiAoKSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIC8vIHNldChoZWFkZXJzLCAnQ29udGVudC1UeXBlJywgJ3RleHQvcGxhaW4nKTtcbiAgICBzZXQoaGVhZGVycywgXCJBY2NlcHRcIiwgXCIqLypcIik7XG4gICAgc2V0KGhlYWRlcnMsIFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICBzZXQoaGVhZGVycywgXCJBY2NlcHQtRW5jb2RpbmdcIiwgXCJnemlwLCBkZWZsYXRlLCBiclwiKTtcbiAgICBzZXQoaGVhZGVycywgXCJDb25uZWN0aW9uXCIsIFwia2VlcC1hbGl2ZVwiKTtcblxuICAgIHJldHVybiBoZWFkZXJzO1xuICB9LFxuICBnZXRIZWFkZXJzOiAoeyBpc1Bhc3NlbmdlckluZm8sIGhhc0ZpbGUgfSkgPT4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICBzZXQoaGVhZGVycywgXCJjYXRlZ29yeV90eXBlXCIsIFwiMVwiKTtcbiAgICBzZXQoaGVhZGVycywgXCJBY2NlcHRcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgIGlmICghaGFzRmlsZSlcbiAgICAgIHNldChoZWFkZXJzLCBcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIik7XG4gICAgZWxzZSBzZXQoaGVhZGVycywgXCJDb250ZW50LVR5cGVcIiwgXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIpO1xuICAgIHNldChoZWFkZXJzLCBcImxhbmd1YWdlXCIsIGkxOG5leHQubGFuZ3VhZ2UpO1xuXG4gICAgaWYgKHRva2VuKSBzZXQoaGVhZGVycywgXCJBdXRob3JpemF0aW9uXCIsIGBCZWFyZXIgJHt0b2tlbn1gKTtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoaXNQYXNzZW5nZXJJbmZvKSB7XG4gICAgICAgIHNldChoZWFkZXJzLCBcIngtaXMtcHNpXCIsIFwidHJ1ZVwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoZWFkZXJzO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIH1cbiAgfSxcbiAgZ2V0QXRIZWFkZXJzOiAoKSA9PiB7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgIHNldChoZWFkZXJzLCBcIkFjY2VwdFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgc2V0KGhlYWRlcnMsIFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiKTtcbiAgICBzZXQoaGVhZGVycywgXCJhcGlfa2V5XCIsIFwiMDEyMzQ1Njc4XCIpO1xuICAgIHJldHVybiBoZWFkZXJzO1xuICB9LFxuICBnZXRTdHJpbmdXaXRob3V0QWNjZW50OiAoc3RyKSA9PiB7XG4gICAgaWYgKHN0cikge1xuICAgICAgcmV0dXJuIHN0clxuICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAucmVwbGFjZShcIsOxXCIsIFwiblwiKVxuICAgICAgICAucmVwbGFjZShcIsOhXCIsIFwiYVwiKVxuICAgICAgICAucmVwbGFjZShcIsOpXCIsIFwiZVwiKVxuICAgICAgICAucmVwbGFjZShcIsOzXCIsIFwib1wiKVxuICAgICAgICAucmVwbGFjZShcIsOtXCIsIFwiaVwiKVxuICAgICAgICAucmVwbGFjZShcIsO6XCIsIFwidVwiKTtcbiAgICB9XG4gIH0sXG4gIGdldEFkZHJlc3NXaXRob3V0QWNjZW50OiAoc3RyKSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coXCJTdHJpbmcgcmVjIGlzLS0tLVwiLCBzdHIpXG4gICAgaWYgKHN0cikge1xuICAgICAgbGV0IG5ld1N0ciA9IHN0clxuICAgICAgICAuc3BsaXQoXCItLS0tXCIpXG4gICAgICAgIC5qb2luKFwiLFwiKVxuICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAucmVwbGFjZShcIsOxXCIsIFwiblwiKVxuICAgICAgICAucmVwbGFjZShcIsOhXCIsIFwiYVwiKVxuICAgICAgICAucmVwbGFjZShcIsOpXCIsIFwiZVwiKVxuICAgICAgICAucmVwbGFjZShcIsOzXCIsIFwib1wiKVxuICAgICAgICAucmVwbGFjZShcIsOtXCIsIFwiaVwiKVxuICAgICAgICAucmVwbGFjZShcIsO6XCIsIFwidVwiKTtcblxuICAgICAgcmV0dXJuIG5ld1N0cjtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZUNsYXNzOiAoZWxlbWVudCwgY2xhc3NOYW1lKSA9PiB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHZhciBjbGFzc2VzID0gZWxlbWVudC5jbGFzc05hbWUuc3BsaXQoXCIgXCIpO1xuICAgICAgdmFyIGkgPSBjbGFzc2VzLmluZGV4T2YoY2xhc3NOYW1lKTtcblxuICAgICAgaWYgKGkgPj0gMCkgY2xhc3Nlcy5zcGxpY2UoaSwgMSk7XG4gICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNsYXNzZXMuam9pbihcIiBcIik7XG4gICAgfVxuICB9LFxuICBhZGQ6IChlbGVtZW50LCBuYW1lKSA9PiB7XG4gICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgIHZhciBuYW1lLCBhcnI7XG4gICAgICBhcnIgPSBlbGVtZW50LmNsYXNzTmFtZS5zcGxpdChcIiBcIik7XG4gICAgICBpZiAoYXJyLmluZGV4T2YobmFtZSkgPT0gLTEpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgKz0gXCIgXCIgKyBuYW1lO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgaXNFbGVtZW50SW5WaWV3OiAoZWwpID0+IHtcbiAgICBpZiAoZWwpIHtcbiAgICAgIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY3QudG9wID49IDAgJiZcbiAgICAgICAgcmVjdC5sZWZ0ID49IDAgJiZcbiAgICAgICAgcmVjdC5ib3R0b20gPD1cbiAgICAgICAgICAod2luZG93LmlubmVySGVpZ2h0IHx8XG4gICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSAvKm9yICQod2luZG93KS5oZWlnaHQoKSAqLyAmJlxuICAgICAgICByZWN0LnJpZ2h0IDw9XG4gICAgICAgICAgKHdpbmRvdy5pbm5lcldpZHRoIHx8XG4gICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpIC8qb3IgJCh3aW5kb3cpLndpZHRoKCkgKi9cbiAgICAgICk7XG4gICAgfVxuICB9LFxuICBwZXJjZW50YWdlOiAobnVtYmVyLCBwZXIpID0+IHtcbiAgICByZXR1cm4gKHBlciAvIDEwMCkgKiBudW1iZXI7XG4gIH0sXG5cbiAgaXNUcmFpbjogKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihcIi9wYXNhamVzLXRyZW5cIikgPiAtMSB8fFxuICAgICAgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoXCIvdHJhaW4tdGlja2V0c1wiKSA+IC0xIHx8XG4gICAgICB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihcIi90cmFpblwiKSA+IC0xXG4gICAgKTtcbiAgfSxcbiAgaXNCb29raW5nU2NyZWVuOiAoKSA9PiB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKFwiYm9va2luZ1wiKSA+IC0xO1xuICB9LFxuICBpc0FUQm9va2luZ1NjcmVlbjogKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihcInRyYW5zZmVyL3BheW1lbnRcIikgPiAtMSB8fFxuICAgICAgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoXCJ0cmFuc2Zlci9wYXltZW50XCIpID4gLTFcbiAgICApO1xuICB9LFxuICBpc0J1c09yVHJhaW46ICgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoXCIvcGFzYWplcy10cmVuXCIpID4gLTEgfHxcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKFwiL3RyYWluLXRpY2tldHNcIikgPiAtMSB8fFxuICAgICAgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoXCIvcGFzYWplcy10cmVuXCIpID4gLTEgfHxcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKFwiL3RyYWluXCIpID4gLTEgfHxcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKFwiL3Bhc2FqZXMtYnVzXCIpID4gLTEgfHxcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKFwiL2J1cy10aWNrZXRzXCIpID4gLTEgfHxcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKFwiL2J1cy9cIikgPiAtMVxuICAgICk7XG4gIH0sXG4gIGlzVW5pUmVkOiAocGF0aCkgPT4ge1xuICAgIGlmIChwYXRoKVxuICAgICAgaWYgKFxuICAgICAgICBwYXRoID09IFwiL3VuaXJlZFwiXG4gICAgICApXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBpc1NhbnBlZHJvbmxpbmU6IChwYXRoKSA9PiB7XG4gICAgbGV0IHdpZGdldF9zcmMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwid2lkZ2V0X3NvdXJjZVwiKTtcbiAgICBpZiAocGF0aClcbiAgICAgIGlmIChcbiAgICAgICAgcGF0aCA9PSBcIi9zYW5wZWRyb25saW5lXCIgfHxcbiAgICAgICAgd2lkZ2V0X3NyYyA9PSBcInNhbnBlZHJvbGluZVwiXG4gICAgICApXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBpc1NhbnBlZHJvbmxpbmU6IChwYXRoKSA9PiB7XG4gICAgbGV0IHdpZGdldF9zcmMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwid2lkZ2V0X3NvdXJjZVwiKTtcbiAgICBpZiAocGF0aClcbiAgICAgIGlmIChcbiAgICAgICAgcGF0aCA9PSBcIi9zYW5wZWRyb25saW5lXCIgfHxcbiAgICAgICAgd2lkZ2V0X3NyYyA9PSBcInNhbnBlZHJvbGluZVwiXG4gICAgICApXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBpc0J1c2VzR29tZXo6IChwYXRoKSA9PiB7XG4gICAgaWYgKHBhdGgpIGlmIChwYXRoID09IFwiL2J1c2VzLWdvbWV6XCIpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgaXNCdXNlc1RvcnJlczogKHBhdGgpID0+IHtcbiAgICBpZiAocGF0aCkgaWYgKHBhdGggPT0gXCIvYnVzZXMtdG9ycmVzXCIpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgaXNIb21lOiAocGF0aCkgPT4ge1xuICAgIGlmIChwYXRoKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHBhdGggPT0gXCIvZXNcIiB8fFxuICAgICAgICBwYXRoID09IFwiL2VzL3Bhc2FqZXMtYnVzXCIgfHxcbiAgICAgICAgcGF0aCA9PSBcIi9lcy9wYXNhamVzLXRyZW5cIiB8fFxuICAgICAgICBwYXRoID09IFwiL2VzL3RyYXNsYWRvc1wiIHx8XG4gICAgICAgIHBhdGggPT0gXCIvZXMvY2FyZ2EtYmlwXCIgfHxcbiAgICAgICAgcGF0aCA9PSBcIi9lcy9rdXBvcy1wb29sXCIgfHxcbiAgICAgICAgcGF0aCA9PSBcIi9lcy92aWFqZXMtZXNwZWNpYWxlc1wiIHx8XG4gICAgICAgIHBhdGggPT0gXCIvZW5cIiB8fFxuICAgICAgICBwYXRoID09IFwiL2VuL2J1cy10aWNrZXRzXCIgfHxcbiAgICAgICAgcGF0aCA9PSBcIi9lbi90cmFpbi10aWNrZXRzXCIgfHxcbiAgICAgICAgcGF0aCA9PSBcIi9lbi90cmFuc2ZlclwiIHx8XG4gICAgICAgIHBhdGggPT0gXCIvZW4vYmlwLXJlY2hhcmdlXCIgfHxcbiAgICAgICAgcGF0aCA9PSBcIi9lbi9rdXBvcy1wb29sXCIgfHxcbiAgICAgICAgcGF0aCA9PSBcIi9lbi9wcml2YXRlLXRyYW5zcG9ydFwiIHx8XG4gICAgICAgIHBhdGggPT0gXCIvZXMvXCIgfHxcbiAgICAgICAgcGF0aCA9PSBcIi9lcy9wYXNhamVzLWJ1cy9cIiB8fFxuICAgICAgICBwYXRoID09IFwiL2VzL3Bhc2FqZXMtdHIvZW4vXCIgfHxcbiAgICAgICAgcGF0aCA9PSBcIi9lcy90cmFzbGFkb3MvXCIgfHxcbiAgICAgICAgcGF0aCA9PSBcIi9lcy9jYXJnYS1iaXAvXCIgfHxcbiAgICAgICAgcGF0aCA9PSBcIi9lcy9rdXBvcy1wb29sL1wiIHx8XG4gICAgICAgIHBhdGggPT0gXCIvZXMvdmlhamVzLWVzcGVjaWFsZXMvXCIgfHxcbiAgICAgICAgcGF0aCA9PSBcIi9lbi9cIiB8fFxuICAgICAgICBwYXRoID09IFwiL2VuL2J1cy10aWNrZXRzL1wiIHx8XG4gICAgICAgIHBhdGggPT0gXCIvZW4vdHJhaW4tdGlja2V0cy9cIiB8fFxuICAgICAgICBwYXRoID09IFwiL2VuL3RyYW5zZmVyL1wiIHx8XG4gICAgICAgIHBhdGggPT0gXCIvZW4vYmlwLXJlY2hhcmdlL1wiIHx8XG4gICAgICAgIHBhdGggPT0gXCIvZW4va3Vwb3MtcG9vbC9cIiB8fFxuICAgICAgICBwYXRoID09IFwiL2VuL3ByaXZhdGUtdHJhbnNwb3J0L1wiXG4gICAgICApXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGZpbGxQYXNzZW5nZXJBdXRvRGF0YTogKCkgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbGV0IHBhc3NlbmdlckRldGFpbHNPbndhcmQgPSBDb21tb25TZXJ2aWNlLmNvcHlPYmplY3QoXG4gICAgICAgIHRoaXMucHJvcHMucGJQYXltZW50RGV0YWlscy5wYXNzZW5nZXJEZXRhaWxzT253YXJkXG4gICAgICApO1xuICAgICAgcGFzc2VuZ2VyRGV0YWlsc09ud2FyZFswXS5uYW1lID0gdGhpcy5wcm9wcy5jb21tb24ubG9naW5EYXRhXG4gICAgICAgID8gdGhpcy5wcm9wcy5jb21tb24ubG9naW5EYXRhLm5hbWVcbiAgICAgICAgOiBudWxsO1xuICAgICAgcGFzc2VuZ2VyRGV0YWlsc09ud2FyZFswXS5sYXN0X25hbWUgPSB0aGlzLnByb3BzLmNvbW1vbi5sb2dpbkRhdGFcbiAgICAgICAgPyB0aGlzLnByb3BzLmNvbW1vbi5sb2dpbkRhdGEubGFzdF9uYW1lXG4gICAgICAgIDogbnVsbDtcbiAgICAgIChwYXNzZW5nZXJEZXRhaWxzT253YXJkWzBdLmlkQ2FyZFR5cGUgPVxuICAgICAgICB0aGlzLnByb3BzLmNvbW1vbi5sb2dpbkRhdGEgJiZcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcy5jb21tb24ubG9naW5EYXRhKS5sZW5ndGhcbiAgICAgICAgICA/IHRoaXMuaWRDYXJkVHlwZXMuZmluZChcbiAgICAgICAgICAgICAgKGl0KSA9PiBpdC52YWx1ZSA9PSB0aGlzLnByb3BzLmNvbW1vbi5sb2dpbkRhdGEuaWRlbnRpdHlfdHlwZVxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogdGhpcy5pZENhcmRUeXBlcy5maW5kKChpdCkgPT4gaXQudmFsdWUgPT0gNykpLFxuICAgICAgICAocGFzc2VuZ2VyRGV0YWlsc09ud2FyZFswXS5pZENhcmROdW1iZXIgPVxuICAgICAgICAgIHRoaXMucHJvcHMuY29tbW9uLmxvZ2luRGF0YSAmJlxuICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMucHJvcHMuY29tbW9uLmxvZ2luRGF0YSkubGVuZ3RoXG4gICAgICAgICAgICA/IHRoaXMucHJvcHMuY29tbW9uLmxvZ2luRGF0YS5pZGVudGl0eV92YWxcbiAgICAgICAgICAgIDogbnVsbCk7XG4gICAgICB0aGlzLnByb3BzLmFjdGlvbnMuc2V0UGFzc2VuZ2VyRGV0YWlsc09ud2FyZChwYXNzZW5nZXJEZXRhaWxzT253YXJkKTtcblxuICAgICAgbGV0IGNvbnRhY3REZXRhaWxzID0ge1xuICAgICAgICBjb3VudHJ5Q29kZTpcbiAgICAgICAgICB0aGlzLmNvdW50cmllQ29kZXMgJiYgdGhpcy5jb3VudHJpZUNvZGVzWzBdXG4gICAgICAgICAgICA/IHRoaXMuY291bnRyaWVDb2Rlc1swXS5uYW1lXG4gICAgICAgICAgICA6IFwiXCIsXG4gICAgICAgIG1vYmlsZTogdGhpcy5wcm9wcy5jb21tb24ubG9naW5EYXRhXG4gICAgICAgICAgPyB0aGlzLnByb3BzLmNvbW1vbi5sb2dpbkRhdGEucGhvbmVcbiAgICAgICAgICA6IG51bGwsXG4gICAgICAgIGVtYWlsOiB0aGlzLnByb3BzLmNvbW1vbi5sb2dpbkRhdGFcbiAgICAgICAgICA/IHRoaXMucHJvcHMuY29tbW9uLmxvZ2luRGF0YS5lbWFpbFxuICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgY29uZmlybUVtYWlsOiB0aGlzLnByb3BzLmNvbW1vbi5sb2dpbkRhdGFcbiAgICAgICAgICA/IHRoaXMucHJvcHMuY29tbW9uLmxvZ2luRGF0YS5lbWFpbFxuICAgICAgICAgIDogbnVsbCxcbiAgICAgIH07XG4gICAgICB0aGlzLnByb3BzLmFjdGlvbnMuc2V0Q29udGFjdERldGFpbHMoY29udGFjdERldGFpbHMpO1xuICAgICAgQ29tbW9uU2VydmljZS5sb2dpbkNhbGxiYWNrRnVuY3Rpb24gPSBudWxsO1xuICAgIH0sIDMwMCk7XG4gIH0sXG4gIGdldFBhcmFtZXRlckJ5TmFtZTogKG5hbWUsIHVybCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoIXVybCkgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXFxdXS9nLCBcIlxcXFwkJlwiKTtcbiAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoXCJbPyZdXCIgKyBuYW1lICsgXCIoPShbXiYjXSopfCZ8I3wkKVwiKSxcbiAgICAgICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgICAgIGlmICghcmVzdWx0cykgcmV0dXJuIG51bGw7XG4gICAgICBpZiAoIXJlc3VsdHNbMl0pIHJldHVybiBcIlwiO1xuICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzJdLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgb2JqVG9RdWVyeTogKG9iaikgPT4ge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBwYXJ0cy5wdXNoKFxuICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2tleV0pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBcIj9cIiArIHBhcnRzLmpvaW4oXCImXCIpO1xuICB9LFxuXG4gIGNlaWxOdW1iZXI6IChybnVtLCBybGVuZ3RoID0gMCkgPT4ge1xuICAgIHZhciBuZXdudW1iZXIgPVxuICAgICAgTWF0aC5jZWlsKHJudW0gKiBNYXRoLnBvdygxMCwgcmxlbmd0aCkpIC8gTWF0aC5wb3coMTAsIHJsZW5ndGgpO1xuICAgIHJldHVybiBuZXdudW1iZXI7XG4gIH0sXG4gIGdldFBvc2l0aW9uOiAoc3RyaW5nLCBzdWJTdHJpbmcsIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIHN0cmluZyA/IHN0cmluZy5zcGxpdChzdWJTdHJpbmcsIGluZGV4KS5qb2luKHN1YlN0cmluZykubGVuZ3RoIDogLTE7XG4gIH0sXG4gIG5vcm1hbGl6ZUFkZHJlc3M6IChhZGRyZXNzKSA9PiB7XG4gICAgcmV0dXJuIGFkZHJlc3NcbiAgICAgID8gYWRkcmVzcy5zdWJzdHIoMCwgQ29tbW9uU2VydmljZS5nZXRQb3NpdGlvbihhZGRyZXNzLCBcIixcIiwgMikpXG4gICAgICA6IFwiXCI7XG4gIH0sXG4gIHJlbW92ZUV4dHJhU3BhY2VzSW5TdHJpbmc6IChzdHIpID0+IHtcbiAgICByZXR1cm4gc3RyID8gc3RyLnJlcGxhY2UoLyAgKy9nLCBcIiBcIikgOiBcIlwiO1xuICB9LFxuXG4gIC8vYW5hbHl0aWNzIGltcHJlc3Npb25zIGFkZGVkIHYyIGJ5IFJhcWliIC0tLSBzdGFydFxuXG4gIHB1c2hQcm9kdWN0SW1wcmVzc2lvbjogKGV2ZW50LCBkYXRhKSA9PiB7XG4gICAgKHdpbmRvdy5kYXRhTGF5ZXIgfHwgW10pLnB1c2goe1xuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgZWNvbW1lcmNlOiB7XG4gICAgICAgIGN1cnJlbmN5Q29kZTogXCJDTFBcIixcbiAgICAgICAgaW1wcmVzc2lvbnM6IGRhdGEsXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuXG4gIGdvb2dsZVByb2R1Y3RDbGljazogKHByb2R1Y3RPYmopID0+IHtcbiAgICAod2luZG93LmRhdGFMYXllciB8fCBbXSkucHVzaCh7XG4gICAgICBldmVudDogXCJwcm9kdWN0Q2xpY2tcIixcbiAgICAgIGVjb21tZXJjZToge1xuICAgICAgICBjbGljazoge1xuICAgICAgICAgIGFjdGlvbkZpZWxkOiB7IGxpc3Q6IHByb2R1Y3RPYmoubGlzdCwgYWN0aW9uOiBcImNsaWNrXCIgfSwgLy8gT3B0aW9uYWwgbGlzdCBwcm9wZXJ0eS5cbiAgICAgICAgICBwcm9kdWN0czogW3Byb2R1Y3RPYmpdLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcblxuICBwdXNoU2VsZWN0ZWRTZWF0czogKHNlYXRzU2VsZWN0ZWQpID0+IHtcbiAgICAod2luZG93LmRhdGFMYXllciB8fCBbXSkucHVzaCh7XG4gICAgICBldmVudDogXCJkZXRhaWxcIixcbiAgICAgIGVjb21tZXJjZToge1xuICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICBhY3Rpb25GaWVsZDoge1xuICAgICAgICAgICAgbGlzdDogc2VhdHNTZWxlY3RlZFswXS5uYW1lLnNsaWNlKDQpLFxuICAgICAgICAgICAgYWN0aW9uOiBcImRldGFpbFwiLFxuICAgICAgICAgIH0sIFxuICAgICAgICAgIHByb2R1Y3RzOiBzZWF0c1NlbGVjdGVkLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcblxuICBwdXNoU2VhdHNBZGRlZFRvQ2FydDogKHByb2R1Y3RPYmopID0+IHtcbiAgICAod2luZG93LmRhdGFMYXllciB8fCBbXSkucHVzaCh7XG4gICAgICBldmVudDogXCJhZGRUb0NhcnRcIixcbiAgICAgIGVjb21tZXJjZToge1xuICAgICAgICBjdXJyZW5jeUNvZGU6IFwiQ0xQXCIsXG4gICAgICAgIGFkZDoge1xuICAgICAgICAgIHByb2R1Y3RzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6IHByb2R1Y3RPYmoubmFtZSwgXG4gICAgICAgICAgICAgIHByaWNlOiBwcm9kdWN0T2JqLnByaWNlLFxuICAgICAgICAgICAgICBicmFuZDogcHJvZHVjdE9iai5icmFuZCxcbiAgICAgICAgICAgICAgY2F0ZWdvcnk6IHByb2R1Y3RPYmouY2F0ZWdvcnksXG4gICAgICAgICAgICAgIHZhcmlhbnQ6IHByb2R1Y3RPYmoudmFyaWFudCxcbiAgICAgICAgICAgICAgcXVhbnRpdHk6IHByb2R1Y3RPYmoucXVhbnRpdHksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuXG4gIHB1c2hQcm9kdWN0Q2hlY2tvdXQ6IChhbGxTZWF0cykgPT4ge1xuICAgICh3aW5kb3cuZGF0YUxheWVyIHx8IFtdKS5wdXNoKHtcbiAgICAgIGV2ZW50OiBcImNoZWNrb3V0XCIsXG4gICAgICBlY29tbWVyY2U6IHtcbiAgICAgICAgY2hlY2tvdXQ6IHtcbiAgICAgICAgICBhY3Rpb25GaWVsZDogeyBzdGVwOiAxLCBvcHRpb246IFwiY2hlY2tvdXRcIiwgYWN0aW9uOiBcImNoZWNrb3V0XCIgfSxcbiAgICAgICAgICBwcm9kdWN0czogYWxsU2VhdHMsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuXG4gIHB1c2hQcm9kdWN0UHVyY2hhc2U6IChhbGxTZWF0cywgdHJhbnNhY3Rpb25JZCwgcmV2ZW51ZSkgPT4ge1xuICAgICh3aW5kb3cuZGF0YUxheWVyIHx8IFtdKS5wdXNoKHtcbiAgICAgIGV2ZW50OiBcInB1cmNoYXNlXCIsXG4gICAgICBlY29tbWVyY2U6IHtcbiAgICAgICAgcHVyY2hhc2U6IHtcbiAgICAgICAgICBhY3Rpb25GaWVsZDoge1xuICAgICAgICAgICAgaWQ6IHRyYW5zYWN0aW9uSWQsXG4gICAgICAgICAgICBhZmZpbGlhdGlvbjogXCJrdXBvcy5jbFwiLFxuICAgICAgICAgICAgcmV2ZW51ZTogcmV2ZW51ZSxcbiAgICAgICAgICAgIHRheDogXCIwXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcm9kdWN0czogYWxsU2VhdHMsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBlbmNvZGVVcmxBZGRyZXNzOiAoc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHN0cmluZ1xuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC5yZXBsYWNlKC8sIC9nLCBcIixcIilcbiAgICAgIC5zcGxpdChcIiAtIFwiKVxuICAgICAgLmpvaW4oXCJfXCIpXG4gICAgICAucmVwbGFjZSgvIC9nLCBcIi1cIilcbiAgICAgIC5zcGxpdChcIi9cIilcbiAgICAgIC5qb2luKFwiXCIpXG4gICAgICAucmVwbGFjZSgvXy9nLCBcIi0tXCIpO1xuICB9LFxuICBkZWNvZGVVcmxBZGRyZXNzOiAoc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHN0cmluZ1xuICAgICAgLnNwbGl0KFwiLFwiKVxuICAgICAgLmpvaW4oXCIsIFwiKVxuICAgICAgLnNwbGl0KFwiLS1cIilcbiAgICAgIC5qb2luKFwiX1wiKVxuICAgICAgLnNwbGl0KFwiLVwiKVxuICAgICAgLmpvaW4oXCIgXCIpXG4gICAgICAuc3BsaXQoXCJfXCIpXG4gICAgICAuam9pbihcIiAtIFwiKVxuICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gIH0sXG4gIGRlY29kZUJhc2U2NDogZnVuY3Rpb24gKHMpIHtcbiAgICB2YXIgZSA9IHt9LFxuICAgICAgaSxcbiAgICAgIGIgPSAwLFxuICAgICAgYyxcbiAgICAgIHgsXG4gICAgICBsID0gMCxcbiAgICAgIGEsXG4gICAgICByID0gXCJcIixcbiAgICAgIHcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLFxuICAgICAgTCA9IHMubGVuZ3RoO1xuICAgIHZhciBBID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7XG4gICAgZm9yIChpID0gMDsgaSA8IDY0OyBpKyspIHtcbiAgICAgIGVbQS5jaGFyQXQoaSldID0gaTtcbiAgICB9XG4gICAgZm9yICh4ID0gMDsgeCA8IEw7IHgrKykge1xuICAgICAgYyA9IGVbcy5jaGFyQXQoeCldO1xuICAgICAgYiA9IChiIDw8IDYpICsgYztcbiAgICAgIGwgKz0gNjtcbiAgICAgIHdoaWxlIChsID49IDgpIHtcbiAgICAgICAgKChhID0gKGIgPj4+IChsIC09IDgpKSAmIDB4ZmYpIHx8IHggPCBMIC0gMikgJiYgKHIgKz0gdyhhKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9LFxuICBhZXNFbmNvZGU6IChcbiAgICBzdHJpbmcsXG4gICAgayA9IFwic29tZXN0cmluZ29mZXhhY3R0aGlydHl0d29sZW5ndGhcIixcbiAgICBpID0gXCIwMDAwMDAwMDAwMDAwMDAwXCJcbiAgKSA9PiB7XG4gICAgdmFyIGtleSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKGspO1xuICAgIHZhciBpdiA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKGkpO1xuICAgIHZhciBlbmNyeXB0ZWQgPSBDcnlwdG9KUy5BRVMuZW5jcnlwdChzdHJpbmcsIGtleSwge1xuICAgICAgaXY6IGl2LFxuICAgICAgbW9kZTogQ3J5cHRvSlMubW9kZS5DQkMsXG4gICAgfSkudG9TdHJpbmcoKTtcbiAgICByZXR1cm4gZW5jcnlwdGVkO1xuICB9LFxuICBhZXNEZWNvZGU6IChcbiAgICBzdHJpbmcsXG4gICAgayA9IFwic29tZXN0cmluZ29mZXhhY3R0aGlydHl0d29sZW5ndGhcIixcbiAgICBpID0gXCIwMDAwMDAwMDAwMDAwMDAwXCJcbiAgKSA9PiB7XG4gICAgdmFyIGtleSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKGspO1xuICAgIHZhciBpdiA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKGkpO1xuICAgIHZhciBieXRlcyA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KHN0cmluZywga2V5LCB7XG4gICAgICBpdjogaXYsXG4gICAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkNCQyxcbiAgICB9KTtcbiAgICB2YXIgZGVjcnlwdGVkID0gYnl0ZXMudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpO1xuICAgIHJldHVybiBkZWNyeXB0ZWQ7XG4gIH0sXG4gIG1ldGFTZWNyZXQ6IChzdHJpbmcsIHN0b3JlID0gdHJ1ZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgZGVjb2RlNjQgPSBhdG9iKHN0cmluZyk7XG4gICAgICBsZXQgYyA9IGRlY29kZTY0LnNwbGl0KFwiQGt1cG9zQFwiKTtcbiAgICAgIGxldCBzID0gQ29tbW9uU2VydmljZS5hZXNEZWNvZGUoKGNbMF0gfHwgXCJcIikuc3BsaXQoXCJcXG5cIikuam9pbihcIlwiKSwgY1sxXSk7XG4gICAgICBpZiAoc3RvcmUpIENvbW1vblNlcnZpY2Uuand0X2tleSA9IHM7XG4gICAgICByZXR1cm4gcztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICB9XG4gIH0sXG5cbiAgZm9ybWF0Q2l0aWVzOiAoY2l0aWVzKSA9PiB7XG4gICAgbGV0IGZvcm1hdHRlZENpdGllcyA9IFtdO1xuICAgIGZvciAobGV0IGNpdHkgb2YgY2l0aWVzKSB7XG4gICAgICBmb3JtYXR0ZWRDaXRpZXMucHVzaCh7XG4gICAgICAgIHZhbHVlOiBjaXR5WzFdLFxuICAgICAgICBsYWJlbDogY2l0eVswXSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0dGVkQ2l0aWVzO1xuICB9LFxuXG4gIGZvcm1hdENpdGllc05ldzogKGNpdGllcykgPT4ge1xuICAgIGxldCBmb3JtYXR0ZWRDaXRpZXMgPSBbXTtcbiAgICBPYmplY3QudmFsdWVzKGNpdGllcykuZm9yRWFjaCgoY2l0eSkgPT4ge1xuICAgICAgZm9ybWF0dGVkQ2l0aWVzLnB1c2goe1xuICAgICAgICB2YWx1ZTogY2l0eVsxXSxcbiAgICAgICAgbGFiZWw6IGNpdHlbMF0sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm9ybWF0dGVkQ2l0aWVzO1xuICB9LFxuXG4gIGVuY29kZUNpdHk6IChjaXR5KSA9PiB7XG4gICAgcmV0dXJuIChjaXR5IHx8IFwiXCIpXG4gICAgICAucmVwbGFjZSgvLS9nLCBcIl9cIilcbiAgICAgIC5yZXBsYWNlKC8gL2csIFwiLVwiKVxuICAgICAgLnJlcGxhY2UoL18vZywgXCItLVwiKVxuICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gIH0sXG4gIGRlY29kZUNpdHk6IChjaXR5KSA9PiB7XG4gICAgcmV0dXJuIChjaXR5IHx8IFwiXCIpXG4gICAgICAuc3BsaXQoXCItLVwiKVxuICAgICAgLmpvaW4oXCIrXCIpXG4gICAgICAuc3BsaXQoXCItXCIpXG4gICAgICAuam9pbihcIiBcIilcbiAgICAgIC5zcGxpdChcIitcIilcbiAgICAgIC5qb2luKFwiLVwiKVxuICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gIH0sXG5cbiAgZ2V0T3JpZ2luU2VsZWN0ZWRGaWx0ZXJlZERlc3RpbmF0aW9uczogKHJhd0FycmF5LCBpdGVtVG9SZW1vdmUpID0+IHtcbiAgICBpZiAocmF3QXJyYXkgJiYgaXRlbVRvUmVtb3ZlKSB7XG4gICAgICByZXR1cm4gcmF3QXJyYXlcbiAgICAgICAgLm1hcChmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgaWYgKG9iai5sYWJlbCA9PSBpdGVtVG9SZW1vdmUubGFiZWwpIHtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiB0eXBlb2Ygb2JqICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFpdGVtVG9SZW1vdmUpIHtcbiAgICB9XG4gIH0sXG5cbiAgc2V0TG9jYWxFbmNyeXA6IChrZXksIHZhbHVlKSA9PiB7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBCYXNlNjQuZW5jb2RlKEpTT04uc3RyaW5naWZ5KHZhbHVlKSkpO1xuICB9LFxuICBnZXRMb2NhbEVuY3J5cDogKGtleSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgbG9jYWxEYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgIGlmIChsb2NhbERhdGEpIHJldHVybiBKU09OLnBhcnNlKEJhc2U2NC5kZWNvZGUobG9jYWxEYXRhKSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sXG4gIHNldFNlc3Npb25FbmNyeXA6IChrZXksIHZhbHVlKSA9PiB7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShrZXksIEJhc2U2NC5lbmNvZGUoSlNPTi5zdHJpbmdpZnkodmFsdWUpKSk7XG4gIH0sXG4gIGdldFNlc3Npb25FbmNyeXA6IChrZXkpID0+IHtcbiAgICB0cnkge1xuICAgICAgbGV0IGxvY2FsRGF0YSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgIGlmIChsb2NhbERhdGEpIHJldHVybiBKU09OLnBhcnNlKEJhc2U2NC5kZWNvZGUobG9jYWxEYXRhKSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sXG4gIGp3dF9rZXk6IFwiXCIsXG4gIG5ld1NlYXJjaEZ1bmN0aW9uOiBudWxsLFxuICBjbGVhclNlYXJjaEZ1bmN0aW9uOiBudWxsLFxuICBuZXdTZWFyY2hUcmFuc2VyRnVuY3Rpb246IG51bGwsXG4gIGxvZ2luQ2FsbGJhY2tGdW5jdGlvbjogbnVsbCxcbiAgcGFzc2VuZ2VyRGV0YWlsc09ud2FyZDogbnVsbCxcbiAgcGFzc2VuZ2VyRGV0YWlsc1JldHVybjogbnVsbCxcbiAgcGFzc2VuZ2VyQ29udGFjdERldGFpbHM6IG51bGwsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb21tb25TZXJ2aWNlO1xuIl0sIm5hbWVzIjpbImN1cnJlbmN5Rm9ybWF0dGVyIiwic2hhMSIsImlzRW1wdHkiLCJzZXQiLCJ0b0ludGVnZXIiLCJCYXNlNjQiLCJpMThuZXh0IiwiQ3J5cHRvSlMiLCJyZXF1aXJlIiwiZ2xvYmFsIiwid2luZG93Iiwic2VhdElkZW50aWZpZXJzIiwiR1kiLCJEUl9JTUciLCJTVF9JTUciLCJXUl9JTUciLCJCUiIsIlNTIiwiTEIiLCJVQiIsIkJTIiwiUEIiLCJOUEIiLCJTTEIiLCJTVUIiLCJTU1QiLCJOQSIsIlNUIiwiRExCIiwiRFVCIiwiV1NTIiwiV1NUIiwiV0xCIiwiV1VCIiwiV1NMIiwiV1NVIiwiQlUiLCJFQyIsIlNFTUlfQ0FNQSIsIlNBTE9OQ0FNQSIsIlNBTE9OX0NBTUEiLCJDTEFTSUNPIiwiRUpFQ1VUSVZPIiwiUFJFTUlVTSIsIlByZW1pdW0iLCJQUkVGRVJFTlRFIiwiUHJlZmVyZW50ZSIsInByZWZlcmVudGUiLCJTQyIsIkNPIiwiRVgiLCJTUCIsIlNBTE9OIiwiU0VNSUNBTUEiLCJDQU1BIiwiQ09NVU4iLCJTQ0EiLCJTYWxvbiIsImdldFNlYXRUeXBlIiwidHlwZSIsInNlYXRJZHMiLCJ0eXBlcyIsImdldEFtZW5pdHlOYW1lIiwicmF3QW5lbWl0eSIsInRva2VuIiwibG9jYWxEYXRhIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJkZWNvZGUiLCJDb21tb25TZXJ2aWNlIiwidG9hc3QiLCJmb3JtYXREYXRhIiwianNvbkFyciIsImtleXMiLCJjdXJyQXJyIiwiaSIsImxlbmd0aCIsImN1cnJlbnRPYmoiLCJqIiwicHVzaCIsInVwZGF0ZUNhcnRJdGVtIiwicHJvZHVjdCIsImluY3JlYXNlIiwiY2FydExpc3QiLCJzZXRDYXJ0TGlzdCIsIm5ld0l0ZW1zQXJyIiwicXR5IiwicXVhbnRpdHkiLCJ0ZW1wUHJvZHVjdCIsInByb2R1Y3RJbmRleCIsIm1hcCIsIml0ZW0iLCJpZCIsInNwbGljZSIsImdldFNlYXROYW1lIiwicmF3U2VhdCIsImNhcGl0YWxpemUiLCJzdHIiLCJzdHJBcnIiLCJzcGxpdCIsInRvVXBwZXJDYXNlIiwic3Vic3RyIiwidG9Mb3dlckNhc2UiLCJqb2luIiwicm91bmQiLCJudW1iZXIiLCJkaWdpdCIsInAiLCJNYXRoIiwicG93IiwiZ2V0VGltZXpvbmVPZmZzZXRJbkhvdXJzQW5kTWludXRlcyIsIm9mZnNldCIsIkRhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsImhvdXJzIiwiYWJzIiwibWludXRlcyIsInByZVplcm8iLCJzcGxpdFJ1dEFuZER2IiwicnV0IiwiY1ZhbHVlIiwicmVwbGFjZSIsImNEdiIsImNoYXJBdCIsImNSdXQiLCJzdWJzdHJpbmciLCJmb3JtYXRSdXQiLCJ2YWx1ZSIsInRvU3RyaW5nIiwicnV0QW5kRHYiLCJydXRGIiwiaXNSdXRWYWxpZCIsIm5SdXQiLCJwYXJzZUludCIsIk5hTiIsImNvbXB1dGVEdiIsImlzUnV0IiwiaWRDYXJkVHlwZXMiLCJjYXJkVHlwZSIsImZpbHRlciIsInQiLCJuYW1lIiwiaW5kZXhPZiIsInN1bWEiLCJtdWwiLCJjb3B5T2JqZWN0Iiwib2IiLCJwYXJzZSIsImlzRU1haWxWYWxpZCIsImVtYWlsIiwibWF0Y2giLCJpc01vYmlsZVZhbGlkIiwibW9iaWxlIiwic3RvcmVMb2dpbkRldGFpbHMiLCJsb2dpbkRhdGEiLCJzZXRMb2dpbkRhdGEiLCJmcm9tSG9tZSIsImF1dGhfdG9rZW4iLCJjYXJwb29sX2N1c3RvbWVyIiwieEFjY2VzcyIsImFjY2Vzc190b2tlbiIsImNhcnBvb2xfZHJpdmVyIiwiZHJpdmVyWEFjY2VzcyIsInNldExvY2FsIiwiaXNMb2dnZWRJbiIsImxvZ291dCIsInJlbW92ZUxvY2FsIiwicmVtb3ZlSXRlbSIsImxvY2F0aW9uIiwicmVsb2FkIiwiZ2V0U3RhdHVzTmFtZSIsInN0YXR1cyIsInMiLCJjb25maXJtZWQiLCJib29rZWQiLCJjYW5jZWxsZWQiLCJwZW5kaW5nIiwicGFydGlhbF9jYW5jZWxsZWQiLCJwaG9uZU51bWJlckZvcm1hdCIsInRleHQiLCJsZW4iLCJvbmx5TnVtYmVycyIsIm9ubHlDaGFycyIsIm9ubHlOdW1lcmljVmFsdWVzIiwicmVtb3ZlQ29tbWFzIiwibmV3VGV4dCIsInZhbCIsImlzRXF1YWwiLCJvdGhlciIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJ2YWx1ZUxlbiIsIm90aGVyTGVuIiwiY29tcGFyZSIsIml0ZW0xIiwiaXRlbTIiLCJpdGVtVHlwZSIsImtleSIsImhhc093blByb3BlcnR5IiwiY3VycmVuY3kiLCJhbW91bnQiLCJmb3JtYXR0ZWRBbW91bnQiLCJmb3JtYXQiLCJjb2RlIiwidHJpbSIsImdlbmVyYXRlWEFjY2VzcyIsInRpbWVOb3ciLCJmbG9vciIsImdldFRpbWUiLCJoZXgiLCJuIiwiZGlzdGFuY2UiLCJsYXQxIiwibG9uMSIsImxhdDIiLCJsb24yIiwidW5pdCIsInJhZGxhdDEiLCJQSSIsInJhZGxhdDIiLCJ0aGV0YSIsInJhZHRoZXRhIiwiZGlzdCIsInNpbiIsImNvcyIsImFjb3MiLCJzaG93M0FkZHJlc3NXb3JkcyIsImFkZHJlc3MiLCJyZXRBZGQiLCJhZGRBcnIiLCJhIiwibWFrZVNlcnZpY2VEZXRhaWxzQXBpIiwic2VydmljZURldGFpbHMiLCJidXNfbGF5b3V0IiwiZmxvb3JBcnIiLCJsb3dlckZsb29yIiwidXBwZXJGbG9vciIsInNlYXRfZGV0YWlscyIsImF2YWlsYWJsZSIsImF2YWlsYWJsZUZsb29yIiwiYXZhaWxhYmxlQXJyIiwiYXZhaWxhYmxlQXJyRmxvb3IiLCJhdmFpbGFibGVTZWF0cyIsImNlbGwiLCJzZWF0TnVtYmVyIiwic2VhdEZhcmUiLCJjb2FjaF9kZXRhaWxzIiwiaW5kZXhPZkNvbG9uIiwiY29hY2hGbG9vcnMiLCJmbG9vck5vIiwicm93QXJyIiwiY29sQXJyIiwic2VhdFR5cGUiLCJyb3dJZCIsImNvbElkIiwiZmxvb3JzIiwiYXJyIiwic2VhdFJldmVyc2UiLCJub3JtYWwiLCJyZXZlcnNlIiwic2VhdEF2YWlsYWJsZSIsIm5vQXZhaWxhYmxlQ29sb24iLCJhdmFpbGFibGVBcnJOb0NvbCIsInNlYXRKc29uIiwiaXNTZWF0IiwiaXNHYW5nd2F5IiwiYmVydGhMb3dlciIsImJlcnRoVXBwZXIiLCJiZXJ0aFR5cGUiLCJzZWF0RGlyZWN0aW9uIiwiZmxvb3JubyIsImlzU2VhdEluRmxvb3JOb3JhbWwiLCJpc1NlYXRJbkZsb29yUmV2IiwiZmluZCIsImlzVHJhaW4iLCJ0cmF2ZWxfaWQiLCJhdmFpbGFibGVJdGVtIiwic2VhdCIsImZhcmUiLCJzdGFnZXMiLCJjb2FjaERldGFpbHMiLCJ0b3RhbF9zZWF0cyIsImF2YWlsYWJsZV9zZWF0cyIsImRyaXZlcl9wb3NpdGlvbiIsIm9iaiIsIm9yaWdpbiIsIm9yaWdpbl9pZCIsImRlc3RpbmF0aW9uIiwiZGVzdGluYXRpb25faWQiLCJ0b3RhbF9hdmFpbGFibGVfc2VhdHMiLCJkZXBfdGltZSIsImFycl90aW1lIiwiZHVyYXRpb24iLCJidXNfdHlwZSIsIm5vX29mX3dhZ29ucyIsImNvc3QiLCJzdGFnZV9kZXRhaWxzIiwiYm9hcmRpbmdfc3RhZ2VzIiwiZHJvcG9mZl9zdGFnZXMiLCJyZXNfZGV0YWlscyIsInJldE9iaiIsImUiLCJzZXRTZWF0TGF5b3V0Iiwicm91dGUiLCJjb2FjaExheW91dEpzb24iLCJ1cHBlckF2YWxpYmlsaXR5Iiwib3JpZ2luU3RhZ2VEZXRhaWxzIiwiZGVzdGluYXRpb25TdGFnZURldGFpbHMiLCJlcnJvck1lc3NhZ2UiLCJtZXNzYWdlIiwic2VhdERldGFpbHMiLCJyb3dfaWQiLCJmbG9vcl9ubyIsImN1cnJlbnRTZWF0SnNvbiIsImJlcnRoVGV4dFBvcyIsInJvd1NwYW4iLCJpc0JlcnRoIiwiaXNSZXNlcnZhYmxlIiwiaXNVcHBlciIsImlzTG93ZXIiLCJvYmplY3QiLCJpc0xhZGllc1NlYXQiLCJpc19sYWRpZXNfc2VhdCIsImlzR2VudHNTZWF0IiwiaXNfZ2VudHNfc2VhdCIsImlzR2FuZ1dheSIsImlzQnJlYWsiLCJpc1NlbGVjdGVkIiwiY29sX2lkIiwiYm9hcmRpbmdTdGFnZSIsImRyb3BwaW5nU3RhZ2UiLCJjb25zb2xlIiwibG9nIiwidHJhbnNwb3NlIiwibWF0cml4IiwicmVkdWNlIiwicHJldiIsIm5leHQiLCJjb25jYXQiLCJzZWxlY3RTZWF0IiwibWV0YURhdGEiLCJjb2FjaExheW91dCIsInNlbGVjdGVkU2VhdHNUb0Jvb2siLCJzZWxlY3RlZFNlcnZpY2UiLCJib29raW5nRGV0YWlscyIsImN1cnJlbnRTZWF0Iiwic2VsZWN0ZWRTZWF0c051bWJlcnMiLCJjb2FjaExheW91dExvY2FsIiwibWF4X3NlYXRzX2FsbG93ZWRfYnlfb3AiLCJtYXhfc2VhdHNfYWxsb3dlZCIsImZpbmRJbmRleCIsInBhc3Nlbmdlck5hbWUiLCJhZ2UiLCJ0b3RhbEJvb2tpbmdBbW91bnQiLCJzZWxlY3RlZFNlYXRzIiwic2VsZWN0ZWRTZWF0VHlwZXMiLCJzZWF0TnVtYmVycyIsImRpc2NvdW50QW1vdW50IiwibmV0Qm9va2luZ0Ftb3VudCIsInNldEl0ZW0iLCJnZXRMb2NhbCIsImdldFNlcnZpY2VGaWx0ZXJzIiwicm91dGVzIiwiZmlsdGVycyIsIm9wZXJhdG9ycyIsInRpdGxlIiwib3B0aW9ucyIsInNlYXRUeXBlcyIsImFtZW5pdGllcyIsInIiLCJmYXJlU3RyIiwiZmFyZV9zdHIiLCJmIiwidHlwZTIiLCJvcGVyYXRvcl9zZXJ2aWNlX25hbWUiLCJhbUFyciIsIm9wZXJhdG9yX2RldGFpbHMiLCJhbSIsImxhYmVsIiwibyIsInNvcnQiLCJnZXRBZ2VuY3lIZWFkZXJzIiwiaGVhZGVycyIsImdldEhlYWRlcnMiLCJpc1Bhc3NlbmdlckluZm8iLCJoYXNGaWxlIiwibGFuZ3VhZ2UiLCJnZXRBdEhlYWRlcnMiLCJnZXRTdHJpbmdXaXRob3V0QWNjZW50IiwiZ2V0QWRkcmVzc1dpdGhvdXRBY2NlbnQiLCJuZXdTdHIiLCJyZW1vdmVDbGFzcyIsImVsZW1lbnQiLCJjbGFzc05hbWUiLCJjbGFzc2VzIiwiYWRkIiwiaXNFbGVtZW50SW5WaWV3IiwiZWwiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9wIiwibGVmdCIsImJvdHRvbSIsImlubmVySGVpZ2h0IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJyaWdodCIsImlubmVyV2lkdGgiLCJjbGllbnRXaWR0aCIsInBlcmNlbnRhZ2UiLCJwZXIiLCJwYXRobmFtZSIsImlzQm9va2luZ1NjcmVlbiIsImlzQVRCb29raW5nU2NyZWVuIiwiaXNCdXNPclRyYWluIiwiaXNVbmlSZWQiLCJwYXRoIiwiaXNTYW5wZWRyb25saW5lIiwid2lkZ2V0X3NyYyIsInNlc3Npb25TdG9yYWdlIiwiaXNCdXNlc0dvbWV6IiwiaXNCdXNlc1RvcnJlcyIsImlzSG9tZSIsImZpbGxQYXNzZW5nZXJBdXRvRGF0YSIsInNldFRpbWVvdXQiLCJwYXNzZW5nZXJEZXRhaWxzT253YXJkIiwicHJvcHMiLCJwYlBheW1lbnREZXRhaWxzIiwiY29tbW9uIiwibGFzdF9uYW1lIiwiaWRDYXJkVHlwZSIsIml0IiwiaWRlbnRpdHlfdHlwZSIsImlkQ2FyZE51bWJlciIsImlkZW50aXR5X3ZhbCIsImFjdGlvbnMiLCJzZXRQYXNzZW5nZXJEZXRhaWxzT253YXJkIiwiY29udGFjdERldGFpbHMiLCJjb3VudHJ5Q29kZSIsImNvdW50cmllQ29kZXMiLCJwaG9uZSIsImNvbmZpcm1FbWFpbCIsInNldENvbnRhY3REZXRhaWxzIiwibG9naW5DYWxsYmFja0Z1bmN0aW9uIiwiZ2V0UGFyYW1ldGVyQnlOYW1lIiwidXJsIiwiaHJlZiIsInJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImV4ZWMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJvYmpUb1F1ZXJ5IiwicGFydHMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJjZWlsTnVtYmVyIiwicm51bSIsInJsZW5ndGgiLCJuZXdudW1iZXIiLCJjZWlsIiwiZ2V0UG9zaXRpb24iLCJzdHJpbmciLCJzdWJTdHJpbmciLCJpbmRleCIsIm5vcm1hbGl6ZUFkZHJlc3MiLCJyZW1vdmVFeHRyYVNwYWNlc0luU3RyaW5nIiwicHVzaFByb2R1Y3RJbXByZXNzaW9uIiwiZXZlbnQiLCJkYXRhIiwiZGF0YUxheWVyIiwiZWNvbW1lcmNlIiwiY3VycmVuY3lDb2RlIiwiaW1wcmVzc2lvbnMiLCJnb29nbGVQcm9kdWN0Q2xpY2siLCJwcm9kdWN0T2JqIiwiY2xpY2siLCJhY3Rpb25GaWVsZCIsImxpc3QiLCJhY3Rpb24iLCJwcm9kdWN0cyIsInB1c2hTZWxlY3RlZFNlYXRzIiwic2VhdHNTZWxlY3RlZCIsImRldGFpbCIsInNsaWNlIiwicHVzaFNlYXRzQWRkZWRUb0NhcnQiLCJwcmljZSIsImJyYW5kIiwiY2F0ZWdvcnkiLCJ2YXJpYW50IiwicHVzaFByb2R1Y3RDaGVja291dCIsImFsbFNlYXRzIiwiY2hlY2tvdXQiLCJzdGVwIiwib3B0aW9uIiwicHVzaFByb2R1Y3RQdXJjaGFzZSIsInRyYW5zYWN0aW9uSWQiLCJyZXZlbnVlIiwicHVyY2hhc2UiLCJhZmZpbGlhdGlvbiIsInRheCIsImVuY29kZVVybEFkZHJlc3MiLCJkZWNvZGVVcmxBZGRyZXNzIiwiZGVjb2RlQmFzZTY0IiwiYiIsImMiLCJ4IiwibCIsInciLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJMIiwiQSIsImFlc0VuY29kZSIsImsiLCJlbmMiLCJVdGY4IiwiaXYiLCJlbmNyeXB0ZWQiLCJBRVMiLCJlbmNyeXB0IiwibW9kZSIsIkNCQyIsImFlc0RlY29kZSIsImJ5dGVzIiwiZGVjcnlwdCIsImRlY3J5cHRlZCIsIm1ldGFTZWNyZXQiLCJzdG9yZSIsImRlY29kZTY0IiwiYXRvYiIsImp3dF9rZXkiLCJmb3JtYXRDaXRpZXMiLCJjaXRpZXMiLCJmb3JtYXR0ZWRDaXRpZXMiLCJjaXR5IiwiZm9ybWF0Q2l0aWVzTmV3IiwidmFsdWVzIiwiZm9yRWFjaCIsImVuY29kZUNpdHkiLCJkZWNvZGVDaXR5IiwiZ2V0T3JpZ2luU2VsZWN0ZWRGaWx0ZXJlZERlc3RpbmF0aW9ucyIsInJhd0FycmF5IiwiaXRlbVRvUmVtb3ZlIiwic2V0TG9jYWxFbmNyeXAiLCJlbmNvZGUiLCJnZXRMb2NhbEVuY3J5cCIsInNldFNlc3Npb25FbmNyeXAiLCJnZXRTZXNzaW9uRW5jcnlwIiwibmV3U2VhcmNoRnVuY3Rpb24iLCJjbGVhclNlYXJjaEZ1bmN0aW9uIiwibmV3U2VhcmNoVHJhbnNlckZ1bmN0aW9uIiwicGFzc2VuZ2VyRGV0YWlsc1JldHVybiIsInBhc3NlbmdlckNvbnRhY3REZXRhaWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./services/commonService.js\n"));

/***/ })

});