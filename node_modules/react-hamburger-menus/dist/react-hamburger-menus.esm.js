import React, { useEffect, useState, useRef } from 'react';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function HandleOutsideClick(ref, setChecked) {
  useEffect(function () {
    function handleClickEvent(event) {
      if (ref.current && !ref.current.contains(event.target)) setChecked(false);
    }

    document.addEventListener('mousedown', handleClickEvent);
    return function () {
      document.removeEventListener('mousedown', handleClickEvent);
    };
  }, [ref]);
}

var amplifyString = function amplifyString(property, defaultV, addr) {
  if (property) return typeof property === 'string' ? property : property + addr;
  return defaultV;
};

var defaultStyles = {
  floatButtonX: 90,
  floatButtonY: 2
};
var GhostButton = function GhostButton(props) {
  var _props2, _props3, _props4, _props$floatButtonSiz, _props5, _props$fontColor, _props6, _props$listHoverColor, _props7, _props$iconColor, _props8, _props$zIndex, _props9, _props10, _props11, _props12, _props13;

  if (props === void 0) {
    props = _extends({}, defaultStyles);
  }

  var _props = props,
      children = _props.children,
      styles = _props.styles,
      className = _props.className,
      id = _props.id,
      icon = _props.icon,
      sticky = _props.sticky;

  var _useState = useState(false),
      checked = _useState[0],
      setChecked = _useState[1];

  var ref = useRef(null);
  HandleOutsideClick(ref, setChecked);
  var iconWidth = amplifyString((_props2 = props) == null ? void 0 : _props2.iconWidth, '2.6em', 'px');
  var iconHeight = amplifyString((_props3 = props) == null ? void 0 : _props3.iconHeight, '2px', 'px');
  var fontSize = amplifyString((_props4 = props) == null ? void 0 : _props4.fontSize, '1em', 'px');
  var cssVariables = {
    '--gb-floatButtonSize': (_props$floatButtonSiz = (_props5 = props) == null ? void 0 : _props5.floatButtonSize) != null ? _props$floatButtonSiz : 6,
    '--gb-fontColor': (_props$fontColor = (_props6 = props) == null ? void 0 : _props6.fontColor) != null ? _props$fontColor : 'black',
    '--gb-fontSize': fontSize,
    '--gb-listHoverColor': (_props$listHoverColor = (_props7 = props) == null ? void 0 : _props7.listHoverColor) != null ? _props$listHoverColor : 'rgba(127, 255, 212, 0.157)',
    '--gb-icon-color': (_props$iconColor = (_props8 = props) == null ? void 0 : _props8.iconColor) != null ? _props$iconColor : 'black',
    '--gb-icon-width': iconWidth,
    '--gb-icon-height': iconHeight,
    '--z-index': (_props$zIndex = (_props9 = props) == null ? void 0 : _props9.zIndex) != null ? _props$zIndex : 1000
  }; // It tracks how to style the list based on page position

  var uniqueId = id != null ? id : Math.floor(Math.random() * 30000000);
  var classId = 'rhm-gb';
  var listPosition = 'left';
  if ((_props10 = props) != null && _props10.floatButtonX && ((_props11 = props) == null ? void 0 : _props11.floatButtonX) < 50) listPosition = 'right';
  return React.createElement("div", {
    className: classId + "-navigation " + className,
    style: _extends({}, styles == null ? void 0 : styles.navigation, cssVariables, {
      right: ((_props12 = props) == null ? void 0 : _props12.floatButtonX) + 'vw',
      top: ((_props13 = props) == null ? void 0 : _props13.floatButtonY) + 'vh',
      position: sticky ? 'fixed' : 'unset'
    }),
    ref: ref,
    "data-testid": 'GhostButton'
  }, React.createElement("input", {
    type: "checkbox",
    className: classId + "-navigation__checkbox",
    id: classId + "-nav-toggle-" + uniqueId,
    checked: checked,
    onChange: function onChange() {
      return setChecked(!checked);
    },
    "data-testid": 'GhostButton-checkbox'
  }), React.createElement("label", {
    htmlFor: classId + "-nav-toggle-" + uniqueId,
    className: classId + "-navigation__button",
    style: _extends({}, styles == null ? void 0 : styles.navigationButton),
    "data-testid": 'GhostButton-button'
  }, icon != null ? icon : React.createElement("span", {
    className: classId + "-navigation__icon",
    style: _extends({}, styles == null ? void 0 : styles.navigationIcon),
    "data-testid": 'GhostButton-icon'
  }, "\xA0"), React.createElement("div", {
    className: "\n          " + classId + "-navigation__card\n          " + classId + "-navigation__card--" + listPosition + "\n          \n          ",
    style: _extends({}, styles == null ? void 0 : styles.navigationCard),
    "data-testid": 'GhostButton-card'
  }, children != null ? children : React.createElement("ul", null, React.createElement("li", null, "ABOUT"), React.createElement("li", null, "PROJECTS"), React.createElement("li", null, "ELEMENTS"), React.createElement("li", null, "CONTACT")))));
};

var defaultStyles$1 = {
  floatButtonX: 90,
  floatButtonY: 2
};
var GhostNavbar = function GhostNavbar(props) {
  var _props2, _props3, _props4, _props$listHoverColor, _props5, _props5$listHoverColo, _props$listHoverColor2, _props6, _props6$listHoverColo, _props$fontColor, _props7, _props$fontHoverColor, _props8, _props$iconColor, _props9, _props$zIndex, _props10, _styles$navigationBut, _styles$navigationBut2, _styles$navigationBut3, _styles$navigationBut4, _props11, _props12, _props13, _props14;

  if (props === void 0) {
    props = _extends({}, defaultStyles$1);
  }

  var _props = props,
      styles = _props.styles,
      children = _props.children,
      className = _props.className,
      id = _props.id,
      rightReveal = _props.rightReveal,
      backgroundBox = _props.backgroundBox;
  var iconWidth = amplifyString((_props2 = props) == null ? void 0 : _props2.iconWidth, '2.6em', 'px');
  var iconHeight = amplifyString((_props3 = props) == null ? void 0 : _props3.iconHeight, '2px', 'px');
  var fontSize = amplifyString((_props4 = props) == null ? void 0 : _props4.fontSize, '3em', 'px');
  var cssVariables = {
    '--gn-listHoverColor-1': (_props$listHoverColor = (_props5 = props) == null ? void 0 : (_props5$listHoverColo = _props5.listHoverColor) == null ? void 0 : _props5$listHoverColo[0]) != null ? _props$listHoverColor : 'transparent',
    '--gn-listHoverColor-2': (_props$listHoverColor2 = (_props6 = props) == null ? void 0 : (_props6$listHoverColo = _props6.listHoverColor) == null ? void 0 : _props6$listHoverColo[1]) != null ? _props$listHoverColor2 : '#fff',
    '--gn-fontColor': (_props$fontColor = (_props7 = props) == null ? void 0 : _props7.fontColor) != null ? _props$fontColor : 'pink',
    '--gn-fontSize': fontSize,
    '--gn-fontHoverColor': (_props$fontHoverColor = (_props8 = props) == null ? void 0 : _props8.fontHoverColor) != null ? _props$fontHoverColor : 'blue',
    '--gn-icon-color': (_props$iconColor = (_props9 = props) == null ? void 0 : _props9.iconColor) != null ? _props$iconColor : 'black',
    '--gn-icon-width': iconWidth,
    '--gn-icon-height': iconHeight,
    '--z-index': (_props$zIndex = (_props10 = props) == null ? void 0 : _props10.zIndex) != null ? _props$zIndex : 1000
  };
  var uniqueId = id != null ? id : Math.floor(Math.random() * 30000000);
  var floatButtonWidth = (_styles$navigationBut = styles == null ? void 0 : (_styles$navigationBut2 = styles.navigationButton) == null ? void 0 : _styles$navigationBut2.width) != null ? _styles$navigationBut : '6em';
  var floatButtonHeight = (_styles$navigationBut3 = styles == null ? void 0 : (_styles$navigationBut4 = styles.navigationButton) == null ? void 0 : _styles$navigationBut4.height) != null ? _styles$navigationBut3 : '6em';
  var classId = 'rhm-gn';
  var revealType = rightReveal ? 'right-screen' : 'left-screen';
  var backgroundType = backgroundBox ? 'square-box' : 'circle-box';
  return React.createElement("div", Object.assign({
    className: classId + "-navigation " + className
  }, props, {
    style: _extends({}, styles == null ? void 0 : styles.navigation, cssVariables),
    "data-testid": 'GhostNavbar'
  }), React.createElement("input", {
    type: "checkbox",
    className: classId + "-navigation__checkbox",
    id: classId + "-navigation-toggle-" + uniqueId,
    "data-testid": 'GhostNavbar-checkbox'
  }), React.createElement("label", {
    htmlFor: classId + "-navigation-toggle-" + uniqueId,
    className: classId + "-navigation__button",
    style: _extends({}, styles == null ? void 0 : styles.navigationButton, {
      width: floatButtonWidth,
      height: floatButtonHeight,
      right: ((_props11 = props) == null ? void 0 : _props11.floatButtonX) + 'vw',
      top: ((_props12 = props) == null ? void 0 : _props12.floatButtonY) + 'vh'
    }),
    "data-testid": 'GhostNavbar-button'
  }, React.createElement("span", {
    className: classId + "-navigation__icon",
    style: styles == null ? void 0 : styles.navigationIcon,
    "data-testid": 'GhostNavbar-icon'
  }, ' ', "\xA0")), React.createElement("div", {
    className: classId + "-navigation__background " + classId + "-navigation__background--" + backgroundType,
    style: _extends({}, styles == null ? void 0 : styles.navigationBackground, {
      width: floatButtonWidth,
      height: floatButtonHeight,
      right: ((_props13 = props) == null ? void 0 : _props13.floatButtonX) + 'vw',
      top: ((_props14 = props) == null ? void 0 : _props14.floatButtonY) + 'vh'
    }),
    "data-testid": 'GhostNavbar-background'
  }, "\xA0"), React.createElement("nav", {
    className: classId + "-navigation__nav " + classId + "-navigation__nav--" + revealType
  }, children ? children : React.createElement("ul", null, React.createElement("li", null, "ABOUT"), React.createElement("li", null, "PROJECTS"), React.createElement("li", null, "ELEMENTS"), React.createElement("li", null, "CONTACT"))));
};

var useMedia = function useMedia(query, val) {
  var _useState = useState(false),
      media = _useState[0],
      setMedia = _useState[1];

  var queryStr = "(" + query + ": " + val + "px)";
  useEffect(function () {
    var mediaWatcher = window.matchMedia(queryStr);
    mediaWatcher.matches ? setMedia(true) : setMedia(false);

    function updateMediaWatcher(e) {
      e.matches ? setMedia(true) : setMedia(false);
    }

    mediaWatcher.addEventListener('change', updateMediaWatcher);
    return function cleanup() {
      mediaWatcher.removeEventListener('change', updateMediaWatcher);
    };
  }, []);
  return media;
};

var useToggle = function useToggle() {
  var _useState = useState(false),
      isOpen = _useState[0],
      setIsOpen = _useState[1];

  var setClose = function setClose() {
    return setIsOpen(false);
  };

  var setOpen = function setOpen() {
    return setIsOpen(true);
  };

  var setToggle = function setToggle() {
    return setIsOpen(function (prev) {
      return !prev;
    });
  };

  return {
    isOpen: isOpen,
    setClose: setClose,
    setOpen: setOpen,
    setToggle: setToggle
  };
};

var ResponsiveNavbar = function ResponsiveNavbar(props) {
  var _props$iconColor, _props$zIndex;

  var children = props.children,
      styles = props.styles,
      className = props.className,
      logo = props.logo,
      toggleNavigationBarSmallValue = props.toggleNavigationBarSmallValue,
      toggleNavigationBarSmallFunction = props.toggleNavigationBarSmallFunction;

  var _useToggle = useToggle(),
      isOpen = _useToggle.isOpen,
      setToggle = _useToggle.setToggle;

  var media = useMedia('min-width', 1000);
  var classId = 'rhm-rn';
  var uniqueId = Math.floor(Math.random() * 30000000);
  var navigationCardStyle = !media ? _extends({}, styles == null ? void 0 : styles.navigationBarLarge, styles == null ? void 0 : styles.navigationCardSmall) : _extends({}, styles == null ? void 0 : styles.navigationBarLarge);
  var animationDelay = amplifyString(props == null ? void 0 : props.animationDelay, '0.1s', 's');
  var iconWidth = amplifyString(props == null ? void 0 : props.iconWidth, '2.6em', 'em');
  var iconHeight = amplifyString(props == null ? void 0 : props.iconHeight, '2px', 'px');
  var cssVariables = {
    '--rn-icon-color': (_props$iconColor = props == null ? void 0 : props.iconColor) != null ? _props$iconColor : 'black',
    '--rn-icon-width': iconWidth,
    '--rn-icon-height': iconHeight,
    '--rn-animation-delay': animationDelay,
    '--z-index': (_props$zIndex = props == null ? void 0 : props.zIndex) != null ? _props$zIndex : 1000
  };
  return React.createElement("div", {
    className: classId + "-navigation " + className,
    style: _extends({}, styles == null ? void 0 : styles.navigation, cssVariables)
  }, !media && React.createElement(React.Fragment, null, React.createElement("input", {
    type: "checkbox",
    className: classId + "-navigation__checkbox",
    id: classId + "-navigation-toggle-" + uniqueId,
    checked: toggleNavigationBarSmallValue != null ? toggleNavigationBarSmallValue : isOpen,
    onChange: toggleNavigationBarSmallFunction != null ? toggleNavigationBarSmallFunction : setToggle
  }), React.createElement("label", {
    htmlFor: classId + "-navigation-toggle-" + uniqueId,
    className: classId + "-navigation__button",
    style: _extends({
      justifyContent: logo ? 'space-between' : 'flex-end'
    }, styles == null ? void 0 : styles.navigationBarSmall)
  }, logo && React.createElement("span", null, logo), React.createElement("span", {
    className: classId + "-navigation__icon",
    "data-testid": 'GhostNavbar-icon',
    style: _extends({}, styles == null ? void 0 : styles.navigationButtonSmall)
  }, ' ', "\xA0"))), React.createElement("nav", {
    className: classId + "-navigation__nav",
    style: navigationCardStyle
  }, media && logo && React.createElement("ul", {
    className: classId + "-navigation__logo"
  }, React.createElement("li", null, logo)), children != null ? children : React.createElement("ul", null, React.createElement("li", null, "ABOUT"), React.createElement("li", null, "PROJECTS"), React.createElement("li", null, "ELEMENTS"), React.createElement("li", null, "CONTACT"))));
};

export { GhostButton, GhostNavbar, ResponsiveNavbar };
//# sourceMappingURL=react-hamburger-menus.esm.js.map
