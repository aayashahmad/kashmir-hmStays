{"version":3,"file":"react-hamburger-menus.cjs.production.min.js","sources":["../src/utils/index.ts","../src/components/GhostButton/GhostButton.tsx","../src/components/GhostNavbar/GhostNavbar.tsx","../src/hooks/useOffset.ts","../src/components/ResponsiveNavbar/ResponsiveNavbar.tsx","../src/hooks/useToggle.tsx","../src/hooks/useMedia.tsx"],"sourcesContent":["export const amplifyString = (\n  property: string | number | undefined,\n  defaultV: string,\n  addr: string\n) => {\n  if (property)\n    return typeof property === 'string' ? property : property + addr;\n\n  return defaultV;\n};\n","import React, { HTMLAttributes, ReactNode, useRef, useState } from 'react';\nimport { HandleOutsideClick } from '../../hooks/useOffset';\nimport { amplifyString } from \"../../utils\";\nimport './style.css';\n\ninterface Styles {\n  navigation?: React.CSSProperties;\n  navigationButton?: React.CSSProperties;\n  navigationIcon?: React.CSSProperties;\n  navigationCard?: React.CSSProperties;\n}\n\nexport interface GhostButtonProps extends HTMLAttributes<HTMLDivElement> {\n  children?: ReactNode;\n  styles?: Styles;\n  className?: string;\n  id?: string;\n  icon?: ReactNode;\n  sticky?:boolean;\n\n\n  floatButtonSize?: string;\n  floatButtonX?: number;\n  floatButtonY?: number;\n  fontColor?: string;\n  fontSize?: string | number;\n  listHoverColor?: string;\n\n  iconColor?: string;\n  iconWidth?: string | number;\n  iconHeight?: string | number;\n\n  zIndex?:number\n}\n\nconst defaultStyles = {\n  floatButtonX: 90,\n  floatButtonY: 2,\n};\n\nexport const GhostButton = (\n  props: GhostButtonProps = { ...defaultStyles }\n) => {\n  const { children, styles, className, id, icon, sticky } = props;\n\n  const [checked, setChecked] = useState(false);\n  const ref = useRef(null);\n\n  HandleOutsideClick(ref, setChecked);\n\n\n  const iconWidth = amplifyString(props?.iconWidth, '2.6em', 'px');\n  const iconHeight = amplifyString(props?.iconHeight, '2px', 'px');\n  const fontSize = amplifyString(props?.fontSize, '1em', 'px');\n\n  var cssVariables = {\n    '--gb-floatButtonSize': props?.floatButtonSize ?? 6,\n    '--gb-fontColor': props?.fontColor ?? 'black',\n    '--gb-fontSize': fontSize,\n    '--gb-listHoverColor':\n    props?.listHoverColor ?? 'rgba(127, 255, 212, 0.157)',\n    '--gb-icon-color': props?.iconColor ?? 'black',\n    '--gb-icon-width': iconWidth,\n    '--gb-icon-height': iconHeight,\n    '--z-index' : props?.zIndex ?? 1000\n  } as React.CSSProperties;\n\n  // It tracks how to style the list based on page position\n  const uniqueId = id ?? Math.floor(Math.random() * 30000000);\n  const classId = 'rhm-gb';\n\n  let listPosition = 'left';\n  if (props?.floatButtonX && props?.floatButtonX < 50) listPosition = 'right';\n\n  return (\n    <div\n      className={`${classId}-navigation ${className}`}\n      style={{\n        ...styles?.navigation,\n        ...cssVariables,\n          right: props?.floatButtonX + 'vw',\n          top: props?.floatButtonY + 'vh',\n          position: sticky? 'fixed' : 'unset'\n      }}\n      ref={ref}\n      data-testid={'GhostButton'}\n    >\n      <input\n        type=\"checkbox\"\n        className={`${classId}-navigation__checkbox`}\n        id={`${classId}-nav-toggle-${uniqueId}`}\n        checked={checked}\n        onChange={() => setChecked(!checked)}\n        data-testid={'GhostButton-checkbox'}\n      />\n      <label\n        htmlFor={`${classId}-nav-toggle-${uniqueId}`}\n        className={`${classId}-navigation__button`}\n        style={{\n          ...styles?.navigationButton,\n        }}\n        data-testid={'GhostButton-button'}\n      >\n        {icon ?? (\n          <span\n            className={`${classId}-navigation__icon`}\n            style={{\n              ...styles?.navigationIcon,\n            }}\n            data-testid={'GhostButton-icon'}\n          >\n            &nbsp;\n          </span>\n        )}\n        <div\n          className={`\n          ${classId}-navigation__card\n          ${classId}-navigation__card--${listPosition}\n          \n          `}\n          style={{\n            ...styles?.navigationCard,\n          }}\n          data-testid={'GhostButton-card'}\n        >\n          {children ?? (\n            <ul>\n              <li>ABOUT</li>\n              <li>PROJECTS</li>\n              <li>ELEMENTS</li>\n              <li>CONTACT</li>\n            </ul>\n          )}\n        </div>\n      </label>\n    </div>\n  );\n};\n","import React, { HTMLAttributes, ReactNode } from 'react';\nimport { amplifyString } from '../../utils';\nimport './style.css';\n\n\ninterface Styles {\n  navigation?: React.CSSProperties;\n  navigationButton?: React.CSSProperties;\n  navigationIcon?: React.CSSProperties;\n  navigationBackground?: React.CSSProperties;\n}\n\nexport interface GhostNavbarProps extends HTMLAttributes<HTMLDivElement> {\n  children?: ReactNode;\n  styles?: Styles;\n  className?: string;\n  id?: string;\n\n  leftReveal?: boolean;\n  rightReveal?: boolean; \n  backgroundBox?: boolean;\n  backgroundCircle?: boolean;\n  \n  floatButtonX?: number;\n  floatButtonY?: number;\n  listHoverColor?: [string, string];\n\n  iconColor?: string;\n  iconWidth?: string | number;\n  iconHeight?: string | number;\n\n  fontColor?: string;\n  fontHoverColor?: string;\n  fontSize?: string | number;\n\n  zIndex?:number\n}\n\nconst defaultStyles = {\n  floatButtonX: 90,\n  floatButtonY: 2,\n};\n\nexport const GhostNavbar = (\n  props: GhostNavbarProps = { ...defaultStyles }\n) => {\n  const { styles, children, className, id, rightReveal, backgroundBox } = props;\n\n\n  const iconWidth = amplifyString(props?.iconWidth, '2.6em', 'px');\n  const iconHeight = amplifyString(props?.iconHeight, '2px', 'px');\n  const fontSize = amplifyString(props?.fontSize, '3em', 'px');\n\n  var cssVariables = {\n    '--gn-listHoverColor-1': props?.listHoverColor?.[0] ?? 'transparent',\n    '--gn-listHoverColor-2': props?.listHoverColor?.[1] ?? '#fff',\n    '--gn-fontColor': props?.fontColor ?? 'pink',\n    '--gn-fontSize': fontSize,\n    '--gn-fontHoverColor': props?.fontHoverColor ?? 'blue',\n    '--gn-icon-color': props?.iconColor ?? 'black',\n    '--gn-icon-width': iconWidth,\n    '--gn-icon-height': iconHeight,\n    '--z-index' : props?.zIndex ?? 1000\n  } as React.CSSProperties;\n\n  const uniqueId = id ?? Math.floor(Math.random() * 30000000);\n  const floatButtonWidth = styles?.navigationButton?.width ?? '6em';\n  const floatButtonHeight = styles?.navigationButton?.height ?? '6em';\n  const classId = 'rhm-gn';\n\n  const revealType = rightReveal ? 'right-screen' : 'left-screen';\n  const backgroundType = backgroundBox ? 'square-box' : 'circle-box';\n\n  return (\n    <div\n      className={`${classId}-navigation ${className}`}\n      {...props}\n      style={{\n        ...styles?.navigation,\n        ...cssVariables,\n      }}\n      data-testid={'GhostNavbar'}\n    >\n      <input\n        type=\"checkbox\"\n        className={`${classId}-navigation__checkbox`}\n        id={`${classId}-navigation-toggle-${uniqueId}`}\n        data-testid={'GhostNavbar-checkbox'}\n      />\n      <label\n        htmlFor={`${classId}-navigation-toggle-${uniqueId}`}\n        className={`${classId}-navigation__button`}\n        style={{\n          ...styles?.navigationButton,\n          width: floatButtonWidth,\n          height: floatButtonHeight,\n          right: props?.floatButtonX + 'vw',\n          top: props?.floatButtonY + 'vh',\n        }}\n        data-testid={'GhostNavbar-button'}\n      >\n        <span\n          className={`${classId}-navigation__icon`}\n          style={styles?.navigationIcon}\n          data-testid={'GhostNavbar-icon'}\n        >\n          {' '}\n          &nbsp;\n        </span>\n      </label>\n      <div\n        className={`${classId}-navigation__background ${classId}-navigation__background--${backgroundType}`}\n        style={{\n          ...styles?.navigationBackground,\n          width: floatButtonWidth,\n          height: floatButtonHeight,\n          right: props?.floatButtonX + 'vw',\n          top: props?.floatButtonY + 'vh',\n        }}\n        data-testid={'GhostNavbar-background'}\n      >\n        &nbsp;\n      </div>\n      <nav\n        className={`${classId}-navigation__nav ${classId}-navigation__nav--${revealType}`}\n      >\n        {children ? (\n          children\n        ) : (\n          <ul>\n            <li>ABOUT</li>\n            <li>PROJECTS</li>\n            <li>ELEMENTS</li>\n            <li>CONTACT</li>\n          </ul>\n        )}\n      </nav>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\n\nexport function HandleOutsideClick(ref: React.RefObject<HTMLInputElement>, setChecked: any) {\n  useEffect(() => {\n    function handleClickEvent(event: any) {\n      if (ref.current && !ref.current.contains(event.target))\n        setChecked(false);\n    }\n\n    document.addEventListener('mousedown', handleClickEvent);\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickEvent);\n    };\n  }, [ref]);\n}\n","import React, { HTMLAttributes, ReactNode } from 'react';\nimport { useMedia, useToggle } from '../../hooks';\nimport { amplifyString } from '../../utils';\nimport './style.css';\n\ninterface Styles {\n  navigation?: React.CSSProperties;\n  navigationBarSmall?: React.CSSProperties;\n  navigationCardSmall?: React.CSSProperties;\n  navigationButtonSmall?: React.CSSProperties;\n\n  navigationBarLarge?: React.CSSProperties;\n}\n\nexport interface ResponsiveNavbarProps extends HTMLAttributes<HTMLDivElement> {\n  children: ReactNode;\n  styles?: Styles;\n  className?: string;\n  id?: string;\n  logo?: ReactNode;\n  toggleNavigationBarSmallValue?: boolean;\n  toggleNavigationBarSmallFunction?: VoidFunction;\n  iconColor?: string;\n  iconWidth?: string | number;\n  iconHeight?: string | number;\n\n  animationDelay?: number | string;\n  zIndex?: number;\n}\n\nexport const ResponsiveNavbar = (props: ResponsiveNavbarProps) => {\n  const {\n    children,\n    styles,\n    className,\n    logo,\n    toggleNavigationBarSmallValue,\n    toggleNavigationBarSmallFunction,\n  } = props;\n\n  const { isOpen, setToggle } = useToggle();\n\n  const media = useMedia('min-width', 1000);\n\n  const classId = 'rhm-rn';\n  const uniqueId = Math.floor(Math.random() * 30000000);\n\n  const navigationCardStyle = !media\n    ? { ...styles?.navigationBarLarge, ...styles?.navigationCardSmall }\n    : { ...styles?.navigationBarLarge };\n\n  const animationDelay = amplifyString(props?.animationDelay, '0.1s', 's');\n  const iconWidth = amplifyString(props?.iconWidth, '2.6em', 'em');\n  const iconHeight = amplifyString(props?.iconHeight, '2px', 'px');\n\n  let cssVariables = {\n    '--rn-icon-color': props?.iconColor ?? 'black',\n    '--rn-icon-width': iconWidth,\n    '--rn-icon-height': iconHeight,\n    '--rn-animation-delay': animationDelay,\n    '--z-index': props?.zIndex ?? 1000,\n  } as React.CSSProperties;\n\n  return (\n    <div\n      className={`${classId}-navigation ${className}`}\n      style={{ ...styles?.navigation, ...cssVariables }}\n    >\n      {!media && (\n        <React.Fragment>\n          <input\n            type=\"checkbox\"\n            className={`${classId}-navigation__checkbox`}\n            id={`${classId}-navigation-toggle-${uniqueId}`}\n            checked={toggleNavigationBarSmallValue ?? isOpen}\n            onChange={toggleNavigationBarSmallFunction ?? setToggle}\n          />\n          <label\n            htmlFor={`${classId}-navigation-toggle-${uniqueId}`}\n            className={`${classId}-navigation__button`}\n            style={{\n              justifyContent: logo ? 'space-between' : 'flex-end',\n              ...styles?.navigationBarSmall,\n            }}\n          >\n            {logo && <span>{logo}</span>}\n            <span\n              className={`${classId}-navigation__icon`}\n              data-testid={'GhostNavbar-icon'}\n              style={{\n                ...styles?.navigationButtonSmall,\n              }}\n            >\n              {' '}\n              &nbsp;\n            </span>\n          </label>\n        </React.Fragment>\n      )}\n      <nav className={`${classId}-navigation__nav`} style={navigationCardStyle}>\n        {media && logo && (\n          <ul className={`${classId}-navigation__logo`}>\n            <li>{logo}</li>\n          </ul>\n        )}\n        {children ?? (\n          <ul>\n            <li>ABOUT</li>\n            <li>PROJECTS</li>\n            <li>ELEMENTS</li>\n            <li>CONTACT</li>\n          </ul>\n        )}\n      </nav>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nexport const useToggle = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const setClose = () => setIsOpen(false);\n  const setOpen = () => setIsOpen(true);\n  const setToggle = ()=> setIsOpen((prev)=> !prev);\n\n  return {isOpen, setClose, setOpen, setToggle};\n};","import { useEffect, useState } from 'react';\n\nexport const useMedia = (query: string, val: number) => {\n  const [media, setMedia] = useState(false)\n  const queryStr = `(${query}: ${val}px)`;\n\n  useEffect(() => {\n    const mediaWatcher = window.matchMedia(queryStr);\n    mediaWatcher.matches ? setMedia(true) : setMedia(false);\n\n    function updateMediaWatcher(e: any) {\n      e.matches ? setMedia(true) : setMedia(false);\n    }\n    mediaWatcher.addEventListener('change', updateMediaWatcher);\n\n    return function cleanup() {\n      mediaWatcher.removeEventListener('change', updateMediaWatcher);\n    };\n  },[]);\n\n  return media\n};\n"],"names":["amplifyString","property","defaultV","addr","defaultStyles","floatButtonX","floatButtonY","props","children","styles","className","id","icon","sticky","useState","checked","setChecked","ref","useRef","useEffect","handleClickEvent","event","current","contains","target","document","addEventListener","removeEventListener","HandleOutsideClick","iconWidth","_props2","iconHeight","_props3","fontSize","_props4","cssVariables","--gb-floatButtonSize","_props5","floatButtonSize","--gb-fontColor","_props6","fontColor","--gb-fontSize","--gb-listHoverColor","_props7","listHoverColor","--gb-icon-color","_props8","iconColor","--gb-icon-width","--gb-icon-height","--z-index","_props9","zIndex","uniqueId","Math","floor","random","listPosition","React","classId","style","navigation","right","top","position","type","onChange","htmlFor","navigationButton","navigationIcon","navigationCard","rightReveal","backgroundBox","--gn-listHoverColor-1","_props5$listHoverColo","--gn-listHoverColor-2","_props6$listHoverColo","--gn-fontColor","--gn-fontSize","--gn-fontHoverColor","fontHoverColor","--gn-icon-color","--gn-icon-width","--gn-icon-height","_props10","floatButtonWidth","_styles$navigationBut2","width","floatButtonHeight","_styles$navigationBut4","height","revealType","backgroundType","navigationBackground","setIsOpen","logo","toggleNavigationBarSmallValue","toggleNavigationBarSmallFunction","isOpen","setClose","setOpen","setToggle","prev","media","query","val","setMedia","mediaWatcher","window","matchMedia","updateMediaWatcher","e","matches","useMedia","navigationCardStyle","navigationBarLarge","navigationCardSmall","animationDelay","--rn-icon-color","--rn-icon-width","--rn-icon-height","--rn-animation-delay","Fragment","justifyContent","navigationBarSmall","navigationButtonSmall"],"mappings":"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"}